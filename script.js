import { initializeApp } from "https://www.gstatic.com/firebasejs/10.5.2/firebase-app.js";



import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.5.2/firebase-analytics.js";

import { getFirestore, setDoc, doc, collection, getDocs , getDoc} from "https://www.gstatic.com/firebasejs/10.5.2/firebase-firestore.js";



const firebaseConfig = {

        apiKey: "AIzaSyB-OV2aqjBJrSCsaIer3eHpt5j2o_-Ea4E",

        authDomain: "daeilfestival-2023.firebaseapp.com",

        projectId: "daeilfestival-2023",

        storageBucket: "daeilfestival-2023.appspot.com",

        messagingSenderId: "583042370316",

        appId: "1:583042370316:web:774324b896a909cd8ed729",

        measurementId: "G-2RNZ656V3M"

};



// Initialize Firebase

const app = initializeApp(firebaseConfig);

//const analytics = getAnalytics(app);

const db = getFirestore(app);





let highscores = {

    1 : null

}



let secondscores = {

    1 : null

}


let userpw = null;


let firstname = {

    1 : null

}



let secondname = {

    1 : null

}



let thirdscores = {

    1 : null

}



let thirdname = {

    1 : null

}


let scores_list = {
    
}




let Ranking =  {

    1 : 1,
    2 : 1,
    3 : 1,
    4 : 1,
    5 : 1,
    6 : 1,
    7 : 1,
    8 : 1,
    9 : 1,
    10 : 1



}




let isshowingloginpage = false



let multiply = {
    1 : 1,
    2 : 1,
    3 : 1,
    4 : 1,
    5 : 1,
    6 : 1,
    7 : 1,
    8 : 1,
    9 : 1,
    10 : 2,
    11 : 1
}






let warning_10 = 2;








const canvas = document.getElementById("playground");

let ctx = canvas.getContext("2d");



let background0image, characterimage, noteimage




let hidden_finding_state = 0;





let line;











ctx.font = "30px Arial";

ctx.fillStyle = "black"; // 텍스트 색상

ctx.textAlign = "center"; // 텍스트 정렬



let accuracy, now_beat_ptrn





let hiddencode_01 = '고 있'





let song_01,song_04,song_06,song_05,score,offset, selected_song, song_audios_list

let song_02, song_03, song_07, song_08, song_09, song_10

let hidden_song_01, hidden_song_02





//variables



song_01 = document.getElementById('song_01');

song_04 = document.getElementById('song_04');

song_06 = document.getElementById('song_06');

song_05 = document.getElementById('song_05');

song_02 = document.getElementById('song_02');
song_03 = document.getElementById('song_03')

song_07 = document.getElementById('song_07');
song_08 = document.getElementById('song_08');
song_09 = document.getElementById('song_09');
song_10 = document.getElementById('song_10');

hidden_song_01 = document.getElementById('hidden_01')

let soundclick = document.getElementById('sound_click')

let soundoffset = document.getElementById('sound_offest')



// 점수

score = 0;



offset = 0; // 단위 : ms



selected_song = 1;



let current_textsize = 20;

let falling_speed = 1;

song_audios_list = {

    1 : song_01,

    2 : song_02,

    3 : song_03,

    4 : song_04,

    5 : song_05,

    6 : song_06,
    
    7 : song_07,
    
    8 : song_08,
    
    9 : song_09,

    10 : song_10,

    11 : hidden_song_01



}







let songs_list_name = {

    1 : '01*. Plum - 눈이 내리는 거리',

    2 : '02*. NewJeans - Hype Boy',

    3 : '03. 르세라핌 - Perfect Night',

    4 : '04. Plum - R',

    5 : '05. Linearity',

    6 : '06. First town of this journey',

    7 : '07. Plum - Timeline',

    8 : '08*. Plum - Rainbow chaser',

    9 : '09*. A.Grande - Santa Tell Me',

    10 : '10. Plum - Selfmade Disaster',

    11 : 'S01. Plum - 찾고 있어'




}

let songs_list_difficulty = {

    1 : 'Easy(Lv.1)',

    2 : 'Hard(Lv.7)',

    3 : 'Normal(Lv.5)',

    4 : 'Insane(Lv.13)',

    5 : 'Harder(Lv.10)',

    6 : 'Hard Demon(Lv.20)',

    7 : 'Mid Demon(Lv.17)',

    8 : 'Harder(Lv.9)',

    9 : 'Normal(Lv.3)',

    10 : 'Impossible(Lv.EX)',

    11 : 'Special(Lv.8)'

}

let songs_bpm = {

    1 : 600,

    2 : 800,

    3 : 544,

    4 : 720,

    5 : '1,400',

    6 : '5,440',
    
    7 : 720,

    8 : 192,

    9 : 388,
    
    10 : '14,784(246cps)',

    11 : '?'

}

let songs_basicbpm = {

    1 : 150,

    2 : 100,

    3 : 136,

    4 : 180,

    5 : 700,

    6 : 780,

    7 : 180,
    
    8 : 96,

    9 : 96,

    10 : 462,

    11 : '?'





}



let song_offsets = {

    1 : 4 * 60 / 150,

    2 : 12 * 60 / 150,

    3 : 4 * 60/100,

    4 : -1/4,

    5 : -0.6,

    6 : -0.8,

    7 : 0,

    8 : 0,

    9 : 0,

    10 : 0,

    11 : 0

}





let song_data_list = {

    1 : [96, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 144, 48, 144, 48, 192, 48, 336, 192, 192, 192, 192, 48, 144, 48, 144, 48, 192, 144, 48, 144, 48, 144, 48, 192, 48, 144, 48, 144, 96, 96, 96, 96, 48, 144, 48, 144, 96, 96, 96, 96, 192, 192, 96, 96, 96, 96, 192, 192, 192, 192, 384, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 96, 96, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 96, 96, 96, 96, 192, 192, 192, 192, 192, 192, 96, 96, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 96, 96, 192, 192, 192, 96, 96, 192, 192, 192, 96, 96, 192, 192, 192, 192, 192, 192, 192, 96, 96, 192, 192, 192, 192, 192, 192, 192, 192],





    2 :[333, 41, 29, 23, 21, 21, 56, 20, 21, 22, 23, 49, 23, 25, 24, 22, 51, 23, 23, 23, 21, 53, 22, 24, 22, 23, 44, 25, 27, 
        23, 22, 51, 23, 24, 20, 22, 51, 23, 22, 21, 26, 51, 19, 23, 21, 25, 48, 24, 24, 22, 24, 51, 23, 25, 22, 21, 46, 26, 25, 25, 24, 48, 24, 23, 23, 22, 45, 24, 24, 22, 24, 48, 24, 24, 23, 23, 72, 74, 36, 36, 34, 37, 33, 18, 16, 18, 17, 37, 34, 36, 39, 33, 37, 34, 37, 35, 35, 37, 36, 34, 37, 19, 37, 17, 55, 42, 35, 79, 40, 33, 38, 30, 20, 19, 18, 15, 20, 15, 35, 17, 35, 21, 31, 33, 21, 37, 48, 38, 40, 30, 39, 65, 74, 69, 76, 70, 75, 75, 429, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        47, 65, 38, 37, 34, 37, 72, 96, 71, 72, 5, 53, 19, 50, 20, 71, 29, 30, 16, 19, 35, 37, 36, 17, 18, 36, 36, 37, 16, 20, 35, 16, 17, 37, 75, 33, 40, 32, 103, 18, 37, 16, 35, 73, 37, 74, 32, 38, 33, 35, 35, 108, 19, 37, 18, 36, 249, 53, 
        51, 33, 64, 21, 66, 57, 49, 63, 20, 19, 45, 60, 32, 43, 20, 19, 16, 59, 43, 14, 17, 28, 15, 16, 14, 201, 37, 35, 33, 
        38, 73, 33, 37, 35, 33, 39, 51, 60, 34, 35, 34, 36, 33, 36, 19, 53, 36, 30, 35, 39, 35, 20, 49, 74, 37, 35, 40, 32, 36, 18, 52, 30, 39, 38, 21, 19, 48, 45, 49, 35, 34, 33, 35, 33, 37, 18, 53, 34, 35, 56, 26, 31, 19, 156, 76, 71, 69, 70, 70, 70, 72, 78, 37, 36, 33, 35, 76, 67, 33, 35, 73, 73, 75, 33, 36, 69, 70, 74, 37, 34, 69, 71, 76, 64, 67, 77, 74, 71, 75, 72, 66, 73, 71, 69, 76, 72, 73, 71, 69, 33, 139, 33, 38, 38, 40, 141, 34, 37, 38, 40, 87, 157, 58, 21, 55, 
        21, 51, 21, 72, 29, 31, 35, 36, 35, 34, 34, 36, 38, 36, 35, 36, 37, 34, 77, 36, 35, 36, 35, 36, 35, 18, 30, 17, 32, 220, 37, 37, 34, 34, 34, 34, 34, 18, 42, 18, 35, 245, 60, 53, 36, 60, 21, 60, 60, 47, 36, 53, 20, 39, 63, 36, 36, 18, 
        19, 19, 89, 38, 36, 19, 19, 17, 192, 37, 36, 32, 37, 18, 87, 35, 37, 19, 18, 39, 51, 55, 32, 35, 34, 37, 33, 42, 20, 
        51, 31, 34, 51, 22, 40, 19, 36, 85, 35, 35, 35, 34, 36, 20, 56, 32, 38, 34, 18, 16, 38, 50, 57, 32, 38, 36, 34, 35, 34, 19, 47, 31, 37, 64, 18, 32, 17, 66, 61]


    ,3 : [800, 28, 52, 30, 46, 51, 54, 26, 11, 15, 27, 52, 50, 80, 75, 80, 79, 54, 53, 79, 52, 82, 50, 11, 12, 26, 51, 54, 78, 71, 55, 56, 50, 55, 26, 24, 25, 27, 26, 27, 27, 25, 26, 26, 29, 25, 25, 29, 24, 25, 27, 27, 24, 29, 23, 24, 30, 262, 26, 27, 27, 26, 29, 26, 27, 25, 24, 27, 26, 25, 27, 27, 27, 24, 23, 28, 25, 27, 24, 27, 237, 133, 26, 27, 205, 52, 52, 55, 51, 53, 56, 51, 85, 24, 21, 23, 27, 54, 26, 23, 29, 25, 26, 30, 48, 21, 30, 57, 21, 28, 26, 26, 26, 27, 27, 26, 27, 123, 57, 51, 50, 28, 56, 26, 27, 26, 80, 27, 49, 26, 27, 27, 26, 25, 25, 28, 24, 28, 134, 202, 32, 26, 27, 25, 
        41, 36, 27, 208, 26, 27, 27, 28, 40, 62, 209, 30, 27, 26, 25, 40, 36, 236, 29, 25, 27, 26, 57, 50, 139, 27, 26, 23, 45, 24, 56, 27, 25, 28, 23, 29, 53, 45, 25, 29, 55, 26, 77, 53, 49, 56, 57, 51, 49, 55, 50, 54, 27, 27, 27, 26, 27, 27, 25, 27, 24, 26, 26, 27, 25, 26, 23, 28, 132, 26, 27, 209, 57, 52, 52, 47, 57, 55, 49, 79, 25, 25, 26, 27, 54, 27, 52, 27, 23, 27, 51, 54, 54, 28, 28, 26, 26, 27, 25, 26, 25, 26, 51, 79, 49, 25, 30, 48, 26, 29, 26, 26, 25, 27, 79, 25, 52, 26, 25, 23, 31, 24, 31, 26, 26, 27, 44, 30, 28, 23, 212, 27, 30, 25, 25, 42, 14, 27, 229, 25, 27, 27, 27, 28, 13, 28, 11, 27, 204, 28, 26, 24, 26, 27, 13, 26, 11, 28, 189, 25, 26, 26, 26, 27, 51, 52, 211, 209, 111, 315, 129, 27, 27, 212, 55, 47, 53, 51, 51, 55, 53, 81, 28, 23, 25, 27, 50, 26, 13, 13, 27, 23, 30, 25, 81, 27, 48, 26, 24, 25, 27, 27, 27, 27, 24, 25, 12, 15, 12, 14, 26, 54, 51, 52, 51, 28, 51, 28, 24, 26, 53, 51, 52, 56, 25, 27, 25, 27, 29, 25, 
        24, 7, 9, 11, 48, 55, 211, 26, 27, 24, 28, 41, 11, 27, 232, 26, 27, 27, 25, 54, 52, 210, 29, 27, 26, 27, 41, 37, 239, 25, 24, 26, 24, 51, 53],

    
    4 : [287,19,42,39,40,21,20,43,42,42,24,18,45,39,44,43,20,42,41,43,21,39,39,41,21,21,42,41,43,21,22,41,43,41,39,23,39,40,47,42,44,42,40,21,39,59,48,22,41,39,40,44,20,20,42,20,40,21,41,63,44,21,41,61,43,21,21,22,20,16,6,12,9,10,10,8,12,19,21,21,21,21,21,44,21,21,21,43,43,21,20,21,20,40,39,21,22,20,21,43,42,42,21,60,43,23,19,21,21,40,41,22,22,20,22,42,42,21,21,21,20,38,43,43,20,42,20,21,21,21,41,43,21,20,21,22,62,20,63,21,44,41,40,40,60,24,62,23,38,43,22,21,22,20,40,21,10,13,40,41,41,23,41,42,21,41,22,42,39,22,41,44,21,20,22,20,61,23,62,21,40,41,44,38,60,26,66,21,38,42,19,22,20,20,44,21,10,11,43,39,22,20,20,43,21,40,42,20,14,6,43,22,11,10,39,25,59,45,22,41,41,40,22,11,10,23,20,10,10,22,20,20,7,14,21,43,10,12,10,12,8,12,9,11,9,11,40,62,19,21,11,11,41,41,41,37,12,8,26,23,10,12,22,22,8,11,24,6,13,11,10,12,10,11,9,12,8,12,8,11,10,10,9,61,64,45,22,39,42,21,42,7,9,26,22,38,41,63,26,7,12,10,9,11,8,11,9,11,10,21,11,8,24,9,10,23,8,12,23,20,8,11,12,8,12,8,12,8,12,9,11,10,11,10,11,9,22,10,13,21,11,11,21,11,11,23,10,12,20,19,22,18,10,10,9,12,20,20,66,57,43,68,55,47,67,52,46,42,21,20,42,42,59,46,21,38,21,23,19,44,20,40,42,23,40,40,59,26,8,12,42,41,63,60,43,62,62,43,62,62,46,45,21,21,41,40,41,21,59,43,20,21,21,40,24,39,44,21,39,43,43,39,21,21,21,45,41,42,40,42,63,58,41,67,54,49,43,42,20,22,21,20,39,41,23,20,41,22,22,21,40,22,39,41,42,45,43,64,17,9,11,21,43,43,39,42,39,67,60,43,60,60,46,43,44,43,40,40,42,21,21,40,21,21,21,40,22,41,64,23,58,22,39,45,22,20,21,20,12,10,11,10,10,9,10,11,8,11,11,9,10,11,10,10,11,11,9,12,9,12,9,12,10,12,11,11,7,14,8,14,8,14,9,13,9,12,9,11,10,11,11,11,9,12,10,11,8,14,8,12,8,12,9,11,11,10,10,10,11,10,10,10,9,11,9,11,10,11,9,10,10,10,10,11,10,11,10,8,25,6,5,8,22,5,8,10,22,19,7,13,7,11,24,22,22,21,11,9,11,9,20,20,6,15,9,12,7,14,3,4,3,12,6,14,7,14,8,12,11,10,12,10,11,10,12,8,13,8,13,8,13,9,11,10,11,12,10,11,11,11,9,11,11,12,9,12,8,12,9,12,10,10,12,9,11,10,10,11,10,11,11,9,10,12,11,10,10,10,11,9,11,9,11,10,11,9,11,10,12,9,12,8,12,9,9,11,11,9,11,9,10,9,11,9,11,8,13,9,12,8,22,11,4,9,25,5,8,11,22,17,12,12,8,12,54,21,65,22,37,43,20,10,12,21,12,12],


    5 :  [3, 1, 8, 10, 13, 13, 1, 10, 12, 11, 13, 1, 11, 10, 11, 10, 1, 11, 10, 12, 11, 1, 8, 11, 10, 13, 1, 7, 13, 9, 13, 1, 10, 13, 10, 13, 1, 13, 11, 11, 12, 1, 10, 11, 11, 12, 1, 10, 10, 12, 12, 1, 9, 11, 11, 12, 1, 10, 10, 12, 11, 1, 8, 13, 10, 14, 1, 11, 11, 12, 12, 1, 10, 10, 13, 8, 1, 12, 8, 13, 11, 1, 11, 12, 11, 13, 1, 9, 11, 14, 10, 3, 11, 12, 10, 13, 1, 10, 11, 12, 12, 1, 11, 10, 12, 10, 1, 12, 11, 11, 13, 1, 11, 11, 11, 13, 1, 10, 12, 11, 12, 1, 12, 10, 13, 
        10, 1, 10, 11, 12, 12, 1, 9, 13, 12, 11, 1, 10, 12, 11, 12, 1, 10, 11, 11, 10, 1, 11, 11, 12, 12, 1, 11, 11, 11, 12, 
        1, 10, 11, 14, 10, 1, 11, 11, 12, 12, 1, 8, 12, 12, 11, 1, 8, 11, 10, 11, 1, 8, 12, 9, 14, 1, 8, 13, 10, 13, 1, 10, 12, 11, 11, 1, 11, 11, 10, 12, 1, 9, 13, 11, 13, 1, 10, 13, 12, 14, 1, 9, 14, 9, 14, 1, 9, 14, 10, 13, 1, 8, 14, 12, 10, 2, 12, 9, 13, 12, 1, 12, 9, 14, 10, 1, 11, 10, 12, 10, 1, 9, 12, 10, 13, 1, 7, 15, 9, 14, 1, 8, 13, 10, 13, 1, 10, 11, 12, 11, 1, 11, 11, 12, 11, 1, 12, 10, 13, 10, 1, 9, 12, 9, 14, 1, 9, 11, 12, 12, 1, 10, 10, 12, 11, 1, 11, 10, 13, 10, 1, 11, 12, 13, 12, 1, 8, 13, 10, 13, 1, 9, 13, 9, 15, 1, 7, 14, 8, 14, 1, 9, 14, 10, 12, 1, 9, 13, 13, 12, 1, 
        9, 12, 11, 11, 1, 9, 12, 11, 12, 1, 9, 12, 10, 13, 1, 10, 13, 10, 11, 1, 12, 10, 13, 11, 1, 9, 11, 11, 12, 1, 9, 10, 
        11, 14, 1, 11, 10, 11, 11, 1, 11, 10, 12, 11, 1, 10, 11, 12, 12, 1, 11, 10, 12, 12, 1, 9, 11, 10, 12, 1, 10, 12, 10, 
        11, 1, 11, 11, 10, 12, 1, 8, 13, 10, 14, 1, 9, 13, 11, 12, 1, 8, 12, 12, 11, 1, 12, 9, 14, 10, 1, 14, 7, 13, 11, 1, 11, 11, 12, 11, 1, 11, 12, 12, 13, 1, 10, 10, 12, 11, 1, 12, 8, 13, 11, 1, 12, 11, 11, 10, 2, 10, 11, 11, 12, 1, 9, 11, 11, 13, 1, 10, 10, 12, 12, 1, 9, 12, 13, 11, 1, 9, 12, 12, 12, 1, 10, 11, 10, 13, 1, 10, 10, 11, 10, 1, 11, 10, 12, 11, 1, 8, 12, 10, 13, 1, 10, 11, 14, 12, 1, 10, 12, 11, 13, 1, 10, 10, 12, 11, 1, 8, 12, 10, 12, 1, 11, 11, 11, 10, 
        1, 10, 11, 11, 12, 1, 9, 10, 13, 10, 1, 11, 10, 12, 11, 1, 10, 10, 12, 10, 1, 10, 13, 10, 12, 1, 11, 10, 10, 12, 1, 10, 11, 11, 12, 1, 10, 11, 11, 13, 1, 8, 12, 9, 13, 1, 10, 10, 12, 13, 1, 10, 12, 11, 15, 1, 9, 14, 8, 14, 1, 8, 13, 11, 15, 1, 9, 12, 10, 13, 1, 11, 11, 12, 12, 1, 9, 12, 13, 10, 1, 12, 10, 11, 12, 1, 9, 12, 11, 12, 1, 11, 10, 11, 12, 1, 10, 11, 11, 13, 1, 11, 10, 11, 12, 1, 11, 13, 10, 13, 1, 9, 12, 12, 10, 2, 10, 11, 12, 12, 1, 9, 13, 11, 12, 1, 8, 14, 9, 12, 1, 11, 10, 12, 14, 1, 8, 13, 9, 14, 1, 8, 16, 9, 16, 1, 10, 15, 10, 13, 1, 10, 12, 11, 12, 3, 10, 13, 11, 13, 1, 8, 14, 10, 14, 1, 9, 12, 9, 14, 1, 8, 12, 11, 12, 1, 11, 10, 12, 10, 1, 11, 10, 12, 12, 1, 11, 10, 11, 11, 1, 11, 11, 11, 11, 1, 13, 10, 11, 11, 1, 11, 13, 12, 10, 1, 11, 10, 12, 9, 2, 10, 11, 10, 11, 1, 12, 9, 15, 9, 1, 11, 
        10, 13, 11, 1, 14, 9, 12, 12, 1, 9, 11, 10, 12, 1, 10, 11, 9, 13, 1, 10, 11, 14, 11, 1, 11, 11, 10, 12, 1, 7, 13, 10, 12, 1, 9, 12, 10, 14, 1, 8, 13, 9, 14, 1, 11, 10, 11, 13, 1, 8, 14, 11, 12, 1, 10, 10, 10, 12, 1, 7, 13, 11, 13, 1, 
        9, 13, 11, 13, 1, 9, 13, 12, 12, 1, 10, 13, 9, 12, 1, 11, 11, 13, 12, 1, 10, 10, 11, 12, 1, 12, 9, 14, 11, 1, 10, 10, 11, 12, 1, 10, 11, 11, 12, 1, 9, 11, 11, 13, 1, 12, 10, 11, 13, 1, 7, 13, 9, 14, 1, 10, 13, 11, 13, 1, 11, 10, 12, 13, 1, 11, 10, 12, 11, 1, 10, 10, 13, 10, 1, 12, 10, 12, 10, 1, 11, 11, 12, 10, 1, 12, 9, 12, 12, 1, 9, 12, 12, 13, 1, 9, 13, 9, 12, 1, 8, 14, 12, 13, 1, 8, 15, 10, 15, 1, 9, 12, 8, 15, 1, 9, 13, 9, 12, 1, 10, 9, 13, 12, 1, 10, 13, 10, 12, 1, 11, 10, 10, 13, 1, 10, 11, 11, 11, 1, 10, 12, 12, 10, 1, 10, 12, 11, 13, 1, 10, 13, 9, 13, 1, 11, 13, 10, 11, 1, 10, 10, 12, 11, 1, 11, 12, 13, 10, 1, 11, 10, 11, 12, 1, 9, 11, 12, 12, 1, 8, 12, 12, 14, 1, 11, 11, 11, 13, 1, 9, 11, 10, 12, 1, 10, 11, 11, 15, 1, 8, 12, 11, 12, 1, 9, 12, 9, 11, 1, 10, 12, 11, 12, 1, 10, 11, 11, 11, 1, 9, 12, 10, 11, 1, 10, 12, 12, 10, 1, 12, 8, 15, 8, 1, 14, 9, 13, 11, 1, 8, 12, 11, 12, 1, 7, 15, 11, 14, 1, 8, 14, 12, 11, 1, 10, 12, 9, 12, 1, 10, 10, 12, 10, 1, 13, 9, 12, 11, 1, 9, 12, 8, 14, 1, 10, 11, 11, 14, 1, 7, 12, 11, 12, 1, 11, 10, 10, 12, 1, 9, 12, 12, 11, 3, 9, 9, 12, 11, 5, 8, 9, 15, 9, 4, 10, 7, 15, 8, 3, 10, 9, 15, 9, 2, 10, 9, 14, 12, 1, 9, 12, 13, 12, 1, 12, 10, 13, 11, 1, 9, 12, 9, 13, 1, 9, 12, 10, 12, 1, 10, 10, 11, 13, 1, 10, 11, 10, 12, 1, 10, 10, 10, 13, 1, 8, 11, 12, 11, 1, 9, 13, 10, 15, 1, 8, 13, 12, 11, 1, 12, 11, 12, 11, 1, 13, 9, 14, 11, 1, 11, 10, 11, 11, 
        1, 11, 10, 12, 11, 1, 11, 11, 12, 11, 1, 11, 11, 11, 13, 1, 11, 10, 11, 12, 1, 9, 11, 9, 16, 1, 8, 14, 9, 13, 1, 11, 
        11, 12, 11, 1, 9, 11, 11, 12, 1, 10, 10, 12, 11, 1, 10, 11, 10, 12, 1, 9, 13, 9, 16, 1, 7, 13, 14, 11, 1, 12, 12, 11, 11, 1, 12, 11, 11, 10, 1, 10, 9, 12, 11, 1, 9, 12, 11, 12, 1, 10, 11, 10, 12, 1, 10, 11, 14, 11, 1, 12, 10, 13, 12, 
        1, 10, 11, 11, 11, 1, 11, 12, 11, 10, 1, 11, 10, 12, 14, 1, 9, 10, 11, 14, 1, 9, 13, 10, 13, 1, 7, 13, 10, 12, 1, 10, 13, 10, 13, 1, 8, 12, 12, 14, 1, 11, 10, 13, 11, 1, 11, 10, 12, 9, 1, 10, 12, 11, 12, 1, 11, 10, 11, 13, 1, 11, 11, 
        9, 12, 1, 10, 10, 14, 10, 1, 8, 13, 10, 11, 1, 10, 10, 13, 10, 1, 9, 11, 9, 13, 1, 10, 12, 12, 11, 1, 10, 12, 10, 13, 1, 8, 12, 12, 12, 1, 11, 8, 13, 11, 1, 11, 12, 11, 13, 1, 11, 11, 12, 12, 1, 11, 13, 8, 15, 1, 9, 11, 15, 10, 1, 12, 12, 10, 12, 1, 9, 12, 10, 13, 1, 8, 14, 10, 12, 1, 9, 13, 12, 11, 1, 10, 11, 10, 13, 1, 8, 15, 8, 13, 1, 10, 12, 11, 13, 1, 9, 12, 9, 12, 1, 11, 11, 11, 13, 1, 8, 12, 9, 13, 1, 9, 11, 12, 9, 1, 13, 9, 14, 9, 1, 13, 10, 14, 10, 1, 12, 11, 9, 12, 3, 8, 11, 10, 11, 1, 10, 9, 12, 14, 1, 7, 13, 10, 10, 1, 11, 11, 10, 14, 1, 9, 12, 11, 12, 1, 10, 13, 10, 13, 1, 10, 13, 10, 15, 1, 9, 12, 11, 12, 1, 9, 11, 10, 13, 1, 7, 13, 10, 12, 1, 9, 11, 12, 12, 1, 9, 13, 10, 12, 1, 
        10, 12, 8, 14, 1, 7, 9, 13, 10, 1, 11, 12, 10, 15, 1, 9, 13, 10, 13, 1, 10, 12, 12, 13, 1, 11, 9, 12, 11, 1, 11, 12, 
        11, 12, 1, 11, 11, 10, 11, 1, 12, 9, 12, 11, 1, 10, 11, 12, 12, 1, 11, 11, 11, 13, 1, 8, 13, 10, 14, 1, 9, 14, 9, 13, 1, 11, 11, 8, 15, 1, 8, 13, 9, 12, 1, 11, 9, 10, 12, 1, 8, 13, 11, 9, 1, 10, 11, 10, 15, 1, 7, 12, 11, 10, 1, 11, 10, 11, 11, 1, 10, 11, 13, 8, 1, 12, 10, 13, 12, 1, 9, 11, 10, 12, 1, 10, 11, 11, 11, 1, 11, 10, 11, 14, 1, 9, 12, 9, 12, 3, 9, 12, 10, 13, 1, 10, 13, 9, 15, 1, 9, 12, 11, 13, 1, 9, 12, 9, 13, 1, 10, 11, 11, 11, 2, 9, 11, 11, 12, 1, 11, 12, 11, 13, 1, 8, 14, 8, 14, 1, 10, 12, 13, 14, 1, 8, 14, 10, 12, 1, 9, 12, 10, 13, 1, 9, 10, 12, 11, 1, 10, 10, 10, 12, 1, 11, 11, 11, 10, 1, 9, 13, 12, 11, 1, 10, 12, 9, 13, 1, 9, 11, 11, 12, 1, 10, 11, 12, 12, 1, 11, 9, 13, 10, 1, 10, 13, 9, 13, 1, 11, 10, 13, 10, 1, 10, 9, 11, 12, 1, 10, 10, 11, 11, 1, 9, 11, 9, 13, 1, 8, 13, 11, 11, 2, 10, 11, 12, 12, 1, 8, 12, 10, 14, 1, 7, 12, 9, 13, 1, 9, 12, 10, 15, 1, 8, 14, 9, 14, 1, 11, 11, 11, 13, 1, 9, 14, 10, 14, 1, 8, 13, 8, 13, 1, 9, 11, 10, 15, 1, 6, 14, 8, 16, 1, 8, 11, 12, 13, 1, 10, 11, 14, 11, 1, 10, 12, 9, 12, 1, 8, 14, 10, 14, 1, 9, 12, 10, 14, 1, 7, 10, 13, 11, 1, 10, 12, 11, 12, 1, 10, 12, 9, 16, 1, 8, 12, 10, 14, 1, 8, 13, 13, 11, 1, 12, 11, 10, 14, 1, 10, 10, 14, 11, 1, 11, 12, 9, 14, 1, 10, 12, 11, 10, 1, 9, 11, 11, 13, 1, 11, 9, 13, 10, 1, 12, 
        10, 11, 11, 1, 10, 10, 12, 12, 1, 12, 10, 12, 13, 1, 10, 11, 15, 8, 1, 12, 10, 10, 12, 1, 10, 13, 8, 14, 1, 10, 10, 9, 12, 1, 9, 13, 9, 15, 3, 7, 12, 12, 12, 1, 10, 11, 12, 12, 1, 10, 11, 12, 12, 1, 10, 12, 10, 13, 1, 10, 12, 13, 11, 
        1, 8, 13, 9, 14, 1, 8, 14, 10, 13, 1, 8, 13, 8, 13, 1, 9, 12, 11, 14, 1, 9, 11, 10, 13, 1, 8, 12, 10, 13, 1, 8, 13, 10, 13, 1, 10, 10, 11, 12, 1, 9, 12, 10, 12, 1, 10, 11, 12, 11, 1, 10, 12, 13, 10, 1, 10, 11, 11, 11, 1, 9, 12, 11, 13, 1, 10, 10, 10, 13, 1, 10, 10, 11, 14, 1, 8, 14, 11, 12, 1, 9, 12, 10, 13, 1, 8, 13, 12, 11, 2, 10, 11, 15, 11, 1, 11, 8, 13, 10, 3, 10, 9, 14, 11, 1, 10, 12, 11, 12, 1, 10, 13, 9, 14, 1, 8, 13, 12, 12, 1, 10, 10, 13, 12, 1, 10, 11, 
        10, 12, 1, 9, 13, 9, 11, 2, 8, 10, 12, 13, 1, 10, 11, 11, 13, 1, 11, 10, 12, 9, 1, 12, 11, 12, 11, 1, 9, 11, 11, 13, 
        1, 10, 11, 13, 12, 1, 8, 13, 10, 13, 1, 9, 11, 12, 12, 1, 9, 12, 10, 11, 1, 11, 11, 11, 13, 1, 7, 13, 10, 10, 1, 10, 
        12, 10, 15, 1, 8, 14, 11, 14, 1, 8, 15, 9, 12, 1, 13, 11, 12, 12, 1, 8, 11, 11, 14, 2, 8, 11, 11, 12, 1, 8, 15, 7, 14, 1, 8, 12, 10, 11, 1, 11, 12, 8, 14, 1, 9, 9, 8, 12, 1, 10, 12, 12, 10, 1, 9, 11, 10, 14, 1, 11, 8, 14, 11, 1, 12, 12, 10, 14, 1, 10, 10, 11, 13, 1, 7, 13, 3, 3, 16, 3, 6, 16, 2, 5, 6, 11, 3, 6, 2, 10, 4, 8, 3, 10, 2, 9, 4, 9, 4, 7, 
        5, 8, 3, 8, 3, 11, 1, 10, 2, 10, 2, 9, 5, 8, 4, 8, 3, 10, 1, 8, 5, 10, 2, 7, 3, 10, 1, 10, 1, 10, 1, 10, 1, 8, 1, 11, 1, 9, 1, 10, 2, 9, 2, 10, 2, 9, 3, 8, 2, 10, 1, 11, 2, 8, 1, 9, 5, 9, 3, 7, 2, 11, 1, 7, 1, 12, 1, 8, 1, 11, 3, 8, 3, 10, 1, 9, 2, 9, 2, 10, 3, 8, 1, 11, 2, 8, 1, 12, 1, 8, 1, 11, 1, 8, 3, 11, 2, 9, 1, 8, 3, 13, 1, 8, 1, 11, 1, 9, 1, 13, 1, 8, 3, 11, 1, 9, 4, 10, 2, 8, 2, 10, 3, 7, 4, 11, 2, 6, 4, 11, 1, 8, 3, 12, 1, 8, 5, 10, 1, 9, 15, 1, 8, 14, 1, 10, 5, 9, 1, 10, 5, 8, 3, 8, 3, 9, 4, 9, 1, 11, 1, 8, 4, 9, 3, 8, 3, 11, 3, 8, 1, 10, 2, 9, 2, 11, 1, 10, 3, 10, 3, 9, 2, 11, 2, 6, 3, 12, 1, 10, 1, 12, 3, 9, 3, 11, 2, 10, 3, 9, 1, 10, 1, 11, 1, 8, 2, 10, 1, 9, 1, 10, 1, 10, 10, 2, 7, 11, 3, 8, 1]




    



    ,6 : [0, 7, 10, 9, 9, 11, 9, 11, 10, 9, 11, 11, 10, 11, 9, 12, 8, 10, 10, 9, 10, 11, 9, 11, 8, 11, 4, 4, 5, 7, 5, 5, 3, 
        7, 1, 8, 11, 11, 9, 11, 11, 10, 10, 10, 11, 11, 9, 10, 8, 10, 10, 10, 10, 9, 11, 9, 9, 11, 9, 4, 8, 9, 12, 9, 4, 6, 9, 12, 10, 11, 9, 12, 9, 11, 10, 11, 10, 9, 11, 10, 11, 9, 10, 10, 11, 9, 10, 9, 10, 9, 11, 9, 10, 10, 10, 9, 11, 4, 5, 6, 5, 5, 5, 3, 7, 9, 12, 10, 12, 10, 11, 9, 12, 8, 13, 8, 12, 8, 11, 9, 9, 10, 9, 11, 10, 9, 11, 9, 11, 9, 11, 9, 11, 9, 11, 8, 11, 131, 41, 58, 67, 44, 122, 43, 65, 60, 43, 126, 43, 66, 59, 41, 62, 65, 43, 87, 83, 64, 20, 61, 9, 11, 32, 32, 23, 33, 31, 22, 59, 20, 66, 10, 9, 29, 33, 23, 29, 31, 23, 66, 5, 11, 60, 9, 11, 32, 34, 20, 32, 32, 18, 43, 3, 8, 69, 44, 47, 38, 42, 42, 0, 10, 9, 12, 8, 12, 8, 12, 9, 11, 10, 11, 9, 11, 10, 10, 11, 12, 9, 12, 8, 11, 10, 9, 11, 9, 12, 8, 12, 8, 11, 10, 10, 10, 11, 8, 11, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 9, 10, 10, 10, 10, 10, 10, 11, 
        10, 10, 10, 11, 9, 11, 10, 10, 10, 10, 10, 10, 10, 9, 11, 10, 11, 10, 9, 11, 10, 10, 11, 9, 10, 10, 10, 10, 10, 10, 10, 11, 9, 11, 9, 10, 11, 10, 10, 11, 9, 11, 9, 11, 8, 12, 7, 12, 8, 12, 9, 11, 9, 11, 7, 11, 6, 13, 4, 6, 4, 5, 5, 5, 3, 8, 3, 7, 2, 6, 4, 6, 2, 5, 4, 6, 4, 5, 5, 5, 4, 5, 6, 4, 5, 5, 6, 4, 4, 8, 35, 31, 18, 20, 23, 33, 32, 21, 21, 18, 19, 20, 20, 22, 42, 22, 22, 12, 32, 34, 33, 32, 27, 27, 12, 8, 12, 9, 12, 10, 30, 28, 20, 19, 18, 33, 29, 21, 21, 21, 21, 20, 20, 25, 39, 20, 22, 9, 33, 34, 31, 31, 28, 33, 30, 22, 20, 13, 26, 28, 31, 33, 28, 34, 20, 22, 26, 20, 23, 45, 20, 22, 10, 36, 34, 34, 33, 27, 27, 9, 11, 9, 11, 8, 11, 29, 25, 23, 21, 18, 30, 30, 19, 20, 19, 21, 21, 22, 57, 22, 28, 9, 30, 36, 30, 32, 25, 34, 28, 26, 0, 20, 8, 12, 21, 20, 19, 20, 20, 8, 12, 22, 20, 19, 21, 20, 21, 19, 23, 
        18, 21, 7, 13, 22, 14, 9, 21, 18, 9, 12, 19, 18, 10, 10, 21, 21, 9, 12, 21, 20, 23, 9, 14, 22, 22, 22, 18, 21, 9, 11, 20, 21, 20, 20, 22, 21, 19, 21, 20, 21, 18, 21, 11, 11, 22, 21, 9, 12, 19, 19, 9, 12, 21, 21, 8, 13, 20, 21, 16, 64, 22, 20, 21, 7, 13, 21, 22, 19, 20, 23, 22, 19, 21, 20, 22, 18, 22, 9, 11, 23, 20, 10, 11, 20, 19, 10, 12, 21, 20, 9, 12, 20, 20, 20, 9, 12, 21, 20, 21, 19, 22, 8, 12, 23, 20, 20, 20, 21, 20, 21, 23, 10, 11, 10, 10, 10, 10, 10, 10, 10, 11, 8, 12, 10, 11, 8, 11, 5, 4, 6, 5, 3, 6, 3, 8, 4, 5, 6, 5, 5, 6, 3, 6, 5, 4, 5, 5, 6, 3, 5, 6, 5, 3, 7, 5, 9, 0, 4, 8, 56, 10, 10, 36, 24, 76, 47, 24, 42, 64, 7, 11, 41, 25, 65, 57, 22, 21, 22, 65, 60, 38, 62, 51, 18, 17, 23, 0, 
        23, 6, 13, 22, 45, 18, 19, 21, 60, 19, 49, 39, 61, 7, 12, 43, 22, 80, 47, 20, 44, 58, 9, 14, 39, 22, 69, 60, 21, 22, 
        19, 65, 59, 41, 64, 47, 19, 39, 66, 54, 43, 61, 9, 13, 43, 30, 7, 9, 27, 18, 21, 18, 22, 21, 19, 19, 20, 18, 22, 20, 
        19, 22, 21, 21, 19, 21, 22, 21, 20, 22, 20, 21, 21, 19, 21, 21, 21, 22, 19, 21, 19, 22, 21, 20, 26, 20, 22, 19, 21, 18, 23, 21, 17, 22, 20, 21, 22, 22, 20, 21, 20, 20, 20, 20, 20, 21, 20, 21, 23, 20, 20, 21, 22, 20, 21, 22, 19, 20, 23, 10, 10, 22, 8, 12, 21, 21, 21, 9, 12, 21, 18, 22, 19, 22, 20, 20, 21, 20, 8, 11, 23, 10, 10, 24, 18, 21, 10, 12, 21, 21, 22, 18, 21, 20, 21, 20, 23, 9, 11, 21, 9, 12, 23, 19, 20, 9, 12, 22, 12, 29, 18, 5, 7, 5, 6, 27, 19, 21, 20, 17, 22, 21, 21, 17, 23, 18, 20, 22, 10, 10, 10, 10, 10, 11, 10, 11, 9, 12, 10, 11, 10, 11, 9, 10, 10, 10, 10, 10, 11, 10, 10, 10, 11, 10, 10, 8, 11, 9, 11, 8, 11, 11, 8, 11, 9, 11, 9, 11, 10, 9, 11, 10, 9, 11, 9, 11, 9, 10, 9, 11, 10, 11, 9, 11, 10, 11, 10, 10, 9, 11, 10, 11, 10, 11, 10, 10, 11, 11, 11, 10, 10, 11, 9, 11, 8, 12, 7, 13, 9, 11, 10, 10, 
        10, 10, 10, 10, 9, 11, 9, 11, 8, 12, 10, 11, 9, 11, 9, 10, 10, 10, 8, 11, 9, 11, 7, 13, 6, 12, 6, 13, 4, 3, 3, 7, 4, 
        4, 11, 3, 7, 1, 9, 2, 7, 3, 6, 2, 7, 3, 7, 3, 6, 3, 7, 4, 5, 4, 6, 5, 5, 4, 8, 21, 27, 17, 21, 19, 20, 35, 31, 20, 21, 19, 22, 20, 22, 20, 11, 8, 10, 10, 23, 21, 10, 30, 34, 34, 29, 32, 26, 12, 11, 9, 11, 11, 32, 24, 23, 20, 21, 35, 31, 23, 20, 19, 22, 20, 21, 22, 44, 19, 23, 10, 29, 34, 34, 28, 31, 32, 25, 22, 17, 18, 29, 30, 29, 29, 22, 15, 14, 10, 12, 8, 13, 7, 11, 9, 9, 10, 10, 10, 9, 9, 40, 19, 22, 9, 34, 33, 33, 30, 28, 27, 9, 11, 12, 8, 12, 9, 27, 28, 23, 20, 18, 34, 31, 21, 19, 20, 22, 19, 22, 20, 4, 8, 8, 14, 8, 3, 10, 8, 12, 9, 2, 9, 10, 9, 11, 2, 7, 11, 11, 9, 2, 8, 11, 11, 9, 3, 8, 11, 9, 12, 2, 6, 11, 8, 12, 2, 6, 9, 9, 11, 1, 18, 8, 11, 17, 21, 20, 20, 21, 13, 8, 21, 20, 22, 20, 
        22, 20, 21, 20, 20, 22, 18, 21, 10, 10, 21, 20, 9, 12, 20, 19, 12, 9, 22, 22, 10, 11, 23, 20, 19, 10, 13, 22, 20, 17, 20, 21, 10, 10, 21, 20, 21, 20, 21, 20, 20, 24, 20, 23, 22, 18, 10, 10, 20, 20, 8, 11, 20, 18, 11, 9, 21, 23, 8, 12, 21, 21, 19, 68, 21, 21, 20, 8, 11, 20, 21, 20, 20, 20, 23, 21, 20, 22, 22, 18, 21, 8, 12, 23, 21, 9, 12, 19, 20, 10, 12, 24, 20, 9, 13, 20, 21, 20, 9, 11, 19, 18, 22, 20, 21, 8, 11, 21, 20, 20, 20, 20, 20, 21, 22, 3, 9, 7, 12, 8, 3, 
        8, 10, 10, 9, 3, 6, 10, 11, 9, 2, 9, 9, 10, 10, 3, 6, 12, 3, 6, 1, 9, 4, 6, 3, 7, 5, 7, 2, 6, 4, 7, 3, 6, 3, 7, 2, 7, 4, 6, 3, 6, 4, 6, 3, 8, 1, 11, 10, 10, 9, 11, 10, 1, 8, 9, 2, 8, 7, 12, 10, 0, 9, 10, 10, 10, 9, 12, 0, 9, 10, 0, 10, 9, 11, 10, 0, 9, 9, 9, 10, 3, 7, 2, 8, 3, 6, 1, 10, 0, 9, 9, 10, 13, 0, 8, 11, 8, 12, 1, 9, 0, 10, 11, 10, 0, 9, 11, 9, 0, 11, 9, 11, 0, 8, 10, 9, 0, 12, 9, 11, 0, 9, 10, 10, 3, 7, 14, 10, 0, 8, 11, 0, 7, 10, 8, 11, 10, 12, 0, 8, 11, 0, 9, 11, 9, 13, 0, 9, 11, 8, 11, 9, 12, 0, 9, 12, 0, 8, 11, 10, 11, 0, 8, 10, 9, 11, 2, 7, 0, 10, 1, 7, 1, 10, 0, 
        9, 11, 9, 12, 0, 8, 11, 7, 12, 1, 8, 0, 10, 11, 10, 0, 9, 12, 9, 0, 11, 8, 12, 0, 8, 12, 8, 0, 11, 9, 13, 0, 7, 12, 8, 0, 12, 8, 14, 0, 7, 11, 0, 9, 11, 12, 9, 10, 11, 0, 9, 10, 0, 9, 10, 10, 10, 0, 10, 10, 10, 10, 9, 11, 0, 7, 13, 0, 7, 11, 8, 13, 0, 9, 10, 8, 11, 3, 5, 2, 9, 3, 6, 2, 9, 0, 11, 8, 12, 8, 12, 9, 0, 9, 11, 0, 10, 9, 11, 9, 0, 10, 11, 8, 12, 10, 13, 1, 7, 12, 0, 10, 8, 11, 9, 2, 10, 8, 12, 7, 2, 10, 7, 12, 7, 1, 11, 9, 10, 10, 9, 12, 0, 9, 12, 0, 8, 11, 9, 11, 0, 8, 11, 9, 11, 9, 13, 0, 8, 12, 0, 8, 11, 10, 11, 0, 8, 9, 8, 13, 0, 1, 0, 1, 5, 3, 0, 0, 7, 1, 3, 5, 1, 2, 7, 1, 6, 10, 9, 12, 8, 12, 0, 7, 11, 0, 8, 11, 9, 13, 0, 8, 13, 9, 12, 12, 11, 0, 9, 12, 0, 8, 11, 9, 10, 2, 6, 
        11, 9, 9, 3, 8, 9, 10, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],



    7 : [180, 18, 18, 15, 22, 19, 20, 39, 81, 15, 23, 19, 19, 19, 20, 38, 38, 40, 42, 20, 19, 21, 19, 39, 19, 21, 18, 21, 18, 21, 19, 19, 18, 21, 18, 19, 21, 21, 17, 20, 0, 22, 18, 21, 18, 20, 21, 0, 40, 77, 0, 19, 19, 19, 19, 20, 19, 0, 38, 
        37, 43, 0, 40, 19, 20, 21, 20, 0, 39, 18, 19, 22, 19, 0, 25, 17, 20, 19, 19, 19, 0, 19, 19, 20, 16, 19, 20, 42, 20, 19, 37, 39, 41, 19, 20, 57, 21, 37, 75, 46, 78, 40, 65, 19, 19, 20, 18, 18, 18, 21, 19, 20, 20, 19, 19, 17, 18, 24, 2, 17, 19, 21, 18, 21, 18, 2, 38, 39, 20, 18, 4, 54, 18, 24, 18, 2, 38, 36, 21, 19, 1, 58, 14, 18, 13, 19, 38, 17, 21, 
        18, 18, 20, 19, 19, 17, 20, 20, 20, 7, 10, 22, 9, 9, 19, 8, 14, 0, 19, 20, 19, 20, 19, 10, 10, 0, 20, 19, 20, 18, 8, 
        12, 7, 13, 0, 18, 20, 20, 20, 20, 19, 0, 20, 19, 21, 20, 19, 20, 0, 19, 20, 20, 20, 17, 22, 0, 19, 19, 18, 19, 9, 11, 9, 12, 0, 19, 19, 18, 18, 7, 11, 10, 11, 0, 19, 18, 19, 19, 20, 19, 0, 19, 0, 19, 13, 6, 12, 8, 19, 21, 0, 18, 0, 19, 9, 10, 10, 9, 20, 22, 0, 19, 9, 10, 20, 19, 20, 19, 1, 8, 10, 11, 7, 11, 7, 11, 9, 9, 9, 8, 10, 0, 8, 11, 8, 11, 8, 12, 8, 11, 8, 11, 8, 11, 0, 8, 11, 8, 10, 10, 10, 8, 11, 0, 20, 0, 20, 0, 10, 7, 12, 6, 12, 7, 11, 7, 1, 18, 1, 20, 
        0, 13, 6, 13, 6, 11, 9, 10, 11, 8, 10, 8, 11, 0, 29, 11, 0, 24, 9, 0, 35, 0, 28, 13, 0, 25, 11, 0, 34, 0, 27, 12, 0, 
        31, 12, 0, 30, 9, 0, 28, 12, 0, 27, 12, 0, 28, 11, 0, 26, 11, 0, 26, 12, 0, 29, 11, 30, 12, 25, 12, 23, 11, 0, 13, 11, 11, 0, 13, 14, 13, 0, 12, 12, 11, 0, 13, 12, 12, 0, 11, 15, 15, 0, 11, 14, 14, 41, 43, 36, 82, 41, 41, 40, 40, 74, 
        37, 40, 43, 36, 37, 43, 42, 11, 10, 11, 8, 11, 8, 10, 9, 10, 9, 10, 9, 10, 10, 10, 10, 9, 10, 9, 11, 8, 11, 8, 12, 7, 12, 8, 11, 9, 11, 9, 11, 9, 10, 9, 10, 10, 10, 11, 9, 10, 10, 9, 9, 9, 10, 10, 10, 22, 15, 16, 16, 14, 18, 41, 79, 18, 20, 22, 19, 20, 19, 38, 38, 42, 46, 20, 20, 16, 21, 38, 21, 17, 20, 21, 18, 19, 19, 19, 19, 20, 83, 9, 10, 12, 8, 
        11, 8, 10, 8, 10, 8, 11, 8, 10, 9, 9, 10, 0, 8, 10, 8, 12, 8, 11, 8, 11, 8, 9, 10, 10, 1, 9, 9, 9, 10, 9, 10, 8, 11, 
        7, 10, 9, 11, 0, 9, 9, 9, 9, 0, 8, 10, 9, 11, 0, 9, 9, 10, 10, 0, 9, 10, 9, 10, 9, 9, 10, 8, 10, 6, 12, 7, 0, 10, 9, 
        10, 9, 11, 8, 11, 7, 11, 6, 12, 8, 0, 9, 9, 9, 10, 0, 8, 10, 10, 8, 1, 9, 8, 11, 9, 1, 8, 9, 10, 9, 0, 8, 9, 11, 8, 1, 10, 9, 11, 11, 0, 8, 11, 9, 11, 9, 11, 10, 9, 10, 8, 11, 8, 1, 9, 10, 8, 12, 8, 12, 10, 10, 10, 9, 10, 9, 0, 10, 9, 12, 7, 12, 7, 12, 9, 10, 8, 10, 9, 0, 11, 9, 11, 10, 0, 9, 9, 11, 9, 0, 9, 9, 10, 9, 0, 9, 9, 12, 9, 10, 10, 9, 9, 9, 9, 11, 7, 0, 12, 7, 13, 9, 0, 9, 9, 10, 10, 0, 10, 8, 11, 9, 0, 11, 7, 11, 9, 11, 8, 9, 12, 0, 7, 11, 8, 12, 0, 8, 
        10, 9, 9, 0, 10, 8, 12, 7, 0, 12, 7, 12, 8, 0, 10, 9, 10, 10, 10, 9, 10, 8, 10, 10, 10, 8, 1, 9, 8, 10, 9, 10, 9, 10, 9, 10, 7, 12, 7, 0, 11, 8, 11, 8, 11, 8, 11, 8, 10, 7, 12, 9, 0, 10, 8, 10, 9, 0, 10, 9, 10, 9, 1, 9, 8, 12, 8, 0, 11, 8, 11, 8, 10, 11, 9, 10, 9, 8, 10, 9, 0, 10, 9, 9, 9, 10, 8, 13, 7, 10, 7, 12, 9, 0, 8, 9, 9, 10, 0, 8, 10, 10, 10, 0, 10, 8, 10, 9, 0, 11, 8, 9, 9, 0, 9, 11, 9, 10, 1, 8, 9, 10, 9, 0, 11, 8, 10, 8, 9, 10, 10, 8, 10, 7, 11, 9, 0, 9, 9, 11, 9, 11, 9, 8, 10, 9, 9, 9, 9, 9, 9, 9, 11, 8, 10, 9, 10, 11, 9, 9, 10, 9, 11, 9, 10, 11, 9, 11, 9, 9, 9, 10, 
        12, 0, 9, 10, 11, 9, 11, 9, 9, 9, 10, 8, 12, 8, 0, 10, 8, 11, 9, 0, 10, 10, 10, 10, 0, 9, 9, 9, 9, 0, 10, 9, 11, 9, 9, 9, 10, 12, 0, 8, 9, 11, 9, 0, 10, 9, 11, 10, 0, 9, 10, 8, 10, 1, 7, 10, 8, 10, 194, 42, 199, 43, 0, 190, 43, 201, 38, 191, 48, 110, 53, 42, 43, 192, 41, 200, 39, 1, 0, 114, 1, 0, 112, 1, 0, 122, 1, 0],

    8 : [105, 21, 26, 36, 37, 37, 38, 33, 39, 36, 37, 37, 77, 103, 37, 37, 41, 39, 38, 37, 39, 38, 31, 36, 38, 76, 112, 37, 37, 36, 36, 37, 36, 38, 37, 37, 37, 36, 73, 128, 81, 68, 70, 71, 72, 33, 77, 120, 29, 37, 34, 40, 36, 38, 31, 41, 36, 
        39, 35, 78, 113, 38, 38, 38, 39, 34, 37, 35, 36, 35, 36, 35, 77, 119, 35, 37, 37, 37, 37, 36, 39, 34, 38, 36, 38, 75, 115, 68, 33, 72, 36, 34, 44, 620, 14, 13, 15, 13, 14, 14, 17, 15, 36, 20, 38, 36, 18, 19, 17, 15, 17, 16, 17, 18, 18, 36, 21, 32, 53, 34, 36, 36, 37, 33, 18, 38, 34, 17, 33, 38, 35, 20, 33, 17, 18, 17, 17, 17, 17, 17, 33, 35, 36, 36, 36, 21, 35, 55, 37, 36, 37, 34, 34, 17, 35, 55, 35, 34, 36, 34, 35, 34, 36, 31, 34, 39, 38, 34, 35, 35, 34, 39, 16, 
        35, 33, 60, 15, 37, 34, 33, 18, 35, 20, 36, 33, 20, 75, 34, 35, 18, 34, 33, 57, 32, 22, 37, 35, 17, 34, 19, 34, 34, 17, 69, 16, 21, 19, 21, 16, 35, 34, 59, 18, 37, 34, 55, 34, 20, 33, 57, 67, 69, 18, 36, 34, 56, 36, 19, 36, 34, 16, 31, 21, 38, 33, 20, 70, 34, 36, 18, 33, 37, 57, 17, 37, 34, 58, 31, 19, 35, 32, 21, 69, 33, 37, 17, 35, 34, 60, 36, 20, 35, 34, 17, 56, 54, 36, 71, 34, 38, 17, 36, 33, 59, 18, 32, 35, 48, 36, 19, 33, 61, 68, 73, 35, 36, 71, 72, 69, 37, 
        36, 35, 36, 34, 39, 34, 38, 72, 36, 18, 20, 59, 39, 18, 17, 73, 18, 8, 11, 17, 20, 69, 35, 37, 71, 72, 71, 72, 63, 17, 7, 15, 18, 15, 69, 78, 71, 41, 17, 16, 68, 36, 14, 18, 72, 20, 6, 12, 18, 17, 68, 35, 34, 72, 38, 33, 69, 40, 33, 72, 17, 8, 12, 15, 17, 75, 35, 38, 39, 17, 35, 17, 18, 17, 14, 35, 35, 17, 18, 18, 36, 33, 35, 34, 35, 38, 37, 18, 18, 36, 17, 38, 17, 20, 16, 33, 17, 38, 17, 19, 16, 35, 17, 35, 34, 18, 51, 18, 20, 17, 19, 18, 36, 19, 36, 17, 18, 18, 
        19, 36, 33, 14, 20, 17, 33, 35, 35, 37, 17, 19, 19, 17, 18, 16, 17, 17, 35, 18, 37, 16, 19, 19, 17, 37, 36, 15, 19, 16, 35, 18, 53, 38, 35, 35, 36, 35, 56, 49, 38, 57, 47, 35, 33, 34, 38, 37, 37, 33, 38, 35, 55, 52, 36, 60, 48, 35, 60, 53, 33, 36, 37, 38, 36, 51, 47, 35, 54, 48, 36, 38, 39, 37, 36, 35, 35, 37, 35, 55, 55, 33, 58, 50, 33, 56, 50, 32, 58, 54, 33, 74, 75, 70, 73, 69, 67, 77, 76, 69, 69, 69, 72, 71, 72, 73, 73, 72, 73, 69, 68, 73, 74, 76, 70, 63, 78, 
        72, 71, 68, 73, 75, 66, 36, 33, 36, 37, 35, 36, 39, 36, 36, 38, 33, 36, 36, 19, 35, 52, 35, 35, 34, 35, 35, 18, 34, 60, 33, 35, 33, 67, 40, 34, 37, 35, 36, 36, 38, 35, 18, 35, 59, 32, 35, 36, 33, 35, 17, 35, 52, 35, 34, 37, 39, 36, 18, 36, 55, 72, 69, 74, 69, 72, 71, 22, 34, 16, 18, 18, 17, 17, 18, 35, 35, 55, 21, 34, 34, 35, 16, 35, 19, 34, 35, 18, 70, 16, 17, 18, 17, 16, 36, 37, 32, 18, 37, 20, 41, 37, 18, 18, 18, 17, 30, 37, 15, 69, 17, 19, 18, 16, 18, 37, 35, 
        52, 17, 40, 32, 35, 18, 37, 17, 34, 55, 70, 15, 20, 17, 19, 16, 37, 36, 37, 17, 35, 19, 36, 31, 20, 37, 19, 37, 37, 17, 67, 72, 17, 34, 36, 53, 17, 36, 35, 39, 15, 36, 17, 37, 35, 19, 69, 17, 17, 19, 16, 19, 36, 38, 35, 18, 32, 19, 34, 34, 17, 18, 17, 18, 36, 35, 15, 75, 31, 37, 15, 43, 33, 55, 19, 35, 34, 34, 17, 33, 18, 35, 60, 68, 76, 33, 33, 35, 37, 34, 34, 36, 39, 74, 67, 74, 66, 172, 166, 164, 172, 186, 257],


    9 : [1608, 33, 39, 37, 79, 32, 36, 41, 34, 72, 84, 38, 39, 32, 38, 37, 39, 41, 34, 37, 40, 33, 43, 70, 76, 109, 42, 36, 35, 116, 68, 39, 73, 81, 37, 76, 76, 76, 73, 73, 37, 75, 79, 333, 297, 305, 150, 151, 301, 292, 74, 74, 79, 78, 42, 13, 44, 48, 79, 71, 295, 306, 77, 106, 62, 60, 144, 148, 79, 37, 38, 36, 76, 41, 36, 37, 38, 71, 78, 35, 38, 36, 38, 40, 38, 36, 37, 39, 38, 33, 42, 76, 58, 125, 38, 39, 37, 75, 36, 39, 33, 44, 75, 76, 36, 36, 37, 38, 38, 40, 38, 38, 34, 38, 38, 39, 75, 61, 61, 288, 114, 35, 79, 80, 110, 32, 79, 72, 36, 18, 54, 41, 34, 20, 40, 54, 149, 153, 147, 152, 
        150, 151, 153, 147, 143, 159, 141, 160, 146, 159, 34, 39, 35, 38, 39, 37, 34, 38, 76, 35, 38, 37, 78, 34, 40, 34, 42, 68, 86, 34, 35, 37, 38, 34, 37, 43, 37, 39, 37, 35, 37, 77, 57, 55, 73, 40, 38, 36, 114, 36, 37, 40, 187, 77, 37, 72, 76, 39, 76, 37, 74, 74, 342, 302, 298, 306, 296, 298, 153, 156, 35, 38, 35, 41, 35, 38, 35, 41, 65, 70, 74, 76, 81, 75, 72, 76, 41, 20, 16, 36, 72, 15, 20, 41, 39, 78, 74, 79, 73, 298, 298, 300, 72, 34, 81, 59, 54, 306, 299, 71, 73, 73, 80, 35, 36, 38, 81, 62, 52, 294, 113, 69, 84, 38, 39, 37, 36, 40, 35, 39, 38, 39, 36, 37, 34, 80, 58, 51, 302, 301, 42, 34, 34, 39, 37, 41, 36, 35, 37, 35, 34, 77, 65],

    10 :  [84, 8, 10, 8, 9, 9, 8, 8, 8, 9, 10, 8, 11, 6, 7, 4, 7, 7, 10, 8, 10, 8, 8, 7, 8, 8, 8, 9, 8, 9, 8, 8, 4, 5, 9, 8, 8, 8, 9, 8, 8, 9, 9, 9, 9, 8, 9, 8, 7, 5, 7, 9, 9, 8, 8, 7, 7, 8, 8, 7, 10, 7, 9, 9, 9, 8, 3, 6, 9, 8, 10, 5, 9, 7, 9, 
        9, 7, 7, 7, 8, 8, 11, 8, 4, 6, 8, 7, 8, 9, 8, 10, 8, 7, 9, 9, 8, 9, 8, 8, 8, 4, 5, 9, 8, 10, 8, 9, 9, 9, 9, 8, 7, 8, 
        8, 9, 8, 8, 4, 7, 8, 8, 8, 8, 8, 8, 8, 9, 8, 9, 9, 9, 8, 9, 8, 4, 6, 9, 9, 8, 4, 7, 7, 9, 7, 4, 7, 6, 8, 6, 4, 6, 8, 
        9, 7, 4, 6, 9, 8, 8, 6, 2, 11, 8, 6, 5, 8, 8, 11, 7, 2, 7, 9, 9, 5, 4, 7, 7, 8, 8, 2, 7, 8, 8, 7, 3, 7, 10, 8, 8, 2, 
        8, 8, 6, 7, 3, 5, 3, 4, 4, 5, 4, 5, 5, 4, 4, 5, 4, 4, 4, 4, 3, 5, 4, 3, 5, 3, 6, 4, 4, 3, 5, 3, 6, 3, 5, 3, 8, 3, 6, 
        10, 8, 7, 2, 7, 10, 6, 8, 3, 5, 9, 7, 7, 3, 8, 10, 9, 8, 3, 8, 9, 8, 8, 2, 6, 9, 6, 10, 3, 5, 2, 4, 4, 3, 2, 3, 7, 4, 5, 4, 6, 3, 4, 4, 6, 3, 9, 4, 10, 5, 1, 8, 8, 2, 7, 7, 2, 8, 7, 10, 7, 3, 6, 7, 2, 2, 3, 4, 6, 2, 5, 3, 8, 4, 7, 4, 
        6, 4, 7, 3, 4, 3, 4, 4, 5, 4, 6, 4, 5, 3, 5, 5, 5, 3, 5, 4, 3, 4, 4, 4, 5, 3, 8, 2, 60, 28, 17, 18, 80, 17, 16, 15, 29, 35, 34, 16, 2, 33, 15, 94, 63, 20, 19, 16, 17, 76, 20, 20, 16, 32, 36, 34, 32, 1, 18, 17, 16, 1, 16, 16, 17, 1, 16, 17, 17, 1, 15, 1, 18, 1, 17, 1, 33, 1, 12, 7, 8, 6, 4, 5, 10, 8, 7, 3, 8, 5, 10, 6, 2, 8, 8, 2, 7, 9, 3, 6, 7, 2, 6, 7, 4, 7, 10, 7, 9, 2, 7, 9, 10, 7, 3, 7, 7, 7, 8, 2, 7, 8, 3, 7, 7, 9, 7, 2, 8, 6, 3, 6, 7, 9, 8, 3, 8, 8, 8, 7, 3, 6, 9, 7, 9, 3, 6, 3, 5, 3, 6, 5, 4, 4, 6, 3, 4, 3, 4, 5, 5, 3, 6, 9, 2, 6, 9, 3, 6, 8, 3, 6, 7, 4, 8, 8, 10, 7, 3, 8, 7, 11, 6, 2, 8, 6, 4, 7, 7, 3, 11, 5, 4, 7, 5, 3, 6, 8, 10, 7, 2, 7, 7, 9, 6, 3, 8, 7, 9, 6, 3, 9, 7, 9, 6, 2, 10, 
        7, 8, 7, 3, 8, 7, 3, 7, 8, 9, 8, 3, 7, 9, 10, 7, 2, 8, 8, 9, 8, 9, 7, 2, 6, 10, 8, 7, 3, 7, 9, 8, 8, 4, 5, 4, 6, 3, 5, 5, 5, 3, 9, 10, 7, 6, 2, 5, 10, 8, 9, 3, 7, 9, 7, 10, 4, 5, 4, 6, 3, 5, 4, 5, 2, 10, 8, 7, 9, 2, 5, 6, 8, 8, 3, 6, 
        3, 4, 3, 2, 8, 3, 5, 1, 10, 5, 2, 7, 6, 4, 6, 9, 8, 6, 4, 5, 7, 7, 8, 4, 5, 9, 9, 7, 2, 8, 2, 6, 3, 6, 5, 5, 3, 9, 5, 10, 8, 2, 5, 3, 6, 3, 5, 3, 4, 4, 8, 8, 9, 7, 3, 4, 4, 7, 5, 3, 3, 6, 1, 10, 6, 2, 6, 6, 2, 8, 1, 6, 4, 6, 3, 6, 4, 
        8, 9, 4, 6, 8, 3, 5, 8, 10, 3, 5, 7, 8, 4, 5, 9, 4, 5, 8, 3, 9, 6, 2, 9, 6, 2, 8, 6, 3, 6, 3, 4, 3, 4, 4, 6, 3, 8, 7, 8, 7, 4, 5, 8, 3, 7, 9, 4, 7, 7, 9, 7, 4, 5, 8, 7, 7, 3, 5, 5, 4, 3, 6, 3, 6, 4, 4, 3, 7, 3, 6, 3, 7, 2, 3, 4, 3, 1, 4, 4, 4, 1, 7, 5, 7, 2, 3, 6, 3, 3, 3, 2, 1, 9, 4, 4, 2, 2, 4, 3, 8, 1, 2, 5, 3, 6, 4, 5, 3, 6, 1, 3, 1, 3, 4, 6, 3, 5, 4, 5, 1, 3, 8, 1, 3, 4, 1, 2, 2, 3, 2, 3, 2, 1, 1, 2, 1, 4, 2, 5, 3, 5, 2, 6, 3, 2, 1, 3, 5, 4, 3, 7, 4, 5, 2, 3, 1, 6, 3, 4, 1, 2, 2, 5, 3, 2, 2, 2, 3, 4, 3, 3, 3, 3, 3, 1, 5, 2, 3, 3, 2, 2, 3, 1, 5, 1, 4, 2, 3, 5, 3, 6, 3, 2, 3, 4, 6, 3, 6, 3, 1, 6, 2, 1, 5, 3, 5, 4, 5, 3, 6, 2, 3, 1, 4, 1, 3, 1, 4, 1, 2, 3, 2, 2, 3, 1, 3, 1, 4, 4, 5, 2, 3, 1, 1, 3, 5, 3, 1, 2, 3, 1, 5, 2, 4, 3, 1, 2, 2, 1, 5, 2, 4, 3, 2, 3, 1, 4, 3, 5, 4, 2, 2, 1, 4, 6, 2, 3, 3, 3, 3, 5, 1, 3, 1, 6, 2, 2, 4, 3, 2, 7, 4, 4, 2, 3, 6, 4, 4, 3, 2, 4, 2, 3, 2, 2, 2, 1, 3, 4, 2, 2, 3, 2, 1, 5, 4, 3, 1, 2, 2, 5, 3, 5, 2, 3, 1, 4, 2, 4, 4, 1, 2, 1, 3, 2, 1, 3, 4, 1, 2, 2, 4, 2, 3, 4, 1, 3, 1, 5, 4, 3, 3, 2, 3, 1, 4, 3, 3, 4, 1, 4, 1, 2, 4, 1, 4, 3, 4, 3, 2, 1, 5, 4, 2, 3, 3, 2, 4, 6, 3, 1, 1, 5, 2, 3, 2, 3, 2, 1, 2, 2, 4, 5, 5, 5, 2, 2, 2, 2, 2, 5, 4, 1, 2, 3, 4, 2, 2, 5, 1, 2, 3, 2, 2, 2, 4, 4, 1, 2, 4, 2, 1, 3, 3, 3, 1, 4, 2, 4, 2, 2, 3, 2, 1, 1, 2, 4, 1, 3, 4, 2, 1, 5, 1, 3, 2, 2, 4, 3, 1, 2, 4, 3, 1, 2, 3, 4, 2, 1, 2, 5, 2, 1, 3, 2, 1, 1, 4, 4, 1, 1, 2, 3, 2, 1, 3, 2, 2, 2, 4, 1, 4, 1, 1, 3, 1, 3, 3, 3, 4, 1, 3, 2, 2, 1, 3, 3, 3, 1, 2, 3, 4, 2, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 1, 3, 3, 2, 2, 4, 4, 1, 1, 2, 2, 2, 1, 4, 3, 1, 1, 2, 2, 2, 2, 5, 3, 1, 1, 2, 4, 1, 1, 3, 2, 4, 1, 3, 2, 4, 1, 1, 4, 3, 1, 2, 3, 3, 1, 2, 4, 3, 1, 2, 2, 4, 1, 1, 4, 3, 1, 1, 1, 5, 1, 1, 1, 3, 2, 1, 2, 2, 5, 2, 1, 3, 1, 1, 1, 3, 5, 1, 1, 4, 3, 1, 3, 1, 5, 1, 1, 5, 1, 2, 3, 2, 2, 1, 1, 4, 4, 1, 1, 2, 2, 2, 2, 1, 10, 117, 57, 55, 17, 17, 17, 14, 16, 49, 
        17, 49, 16, 17, 15, 16, 16, 17, 15, 18, 16, 48, 10, 8, 44, 16, 19, 18, 16, 16, 17, 16, 18, 16, 32, 35, 18, 16, 15, 18, 30, 15, 35, 14, 18, 18, 14, 16, 18, 32, 31, 32, 18, 18, 18, 15, 17, 17, 16, 14, 17, 17, 15, 16, 19, 1, 17, 16, 17, 
        1, 17, 1, 17, 16, 1, 16, 1, 20, 15, 1, 15, 1, 17, 17, 1, 17, 1, 19, 16, 1, 15, 1, 15, 16, 1, 16, 19, 1, 15, 1, 16, 8, 9, 7, 8, 8, 8, 9, 10, 4, 6, 10, 7, 8, 3, 8, 7, 9, 6, 2, 8, 6, 2, 6, 8, 3, 6, 8, 3, 7, 5, 2, 8, 8, 7, 9, 1, 7, 11, 1, 7, 10, 9, 8, 1, 9, 9, 1, 7, 9, 1, 9, 8, 1, 9, 6, 10, 7, 1, 7, 9, 1, 9, 7, 9, 9, 1, 8, 9, 8, 7, 1, 7, 9, 9, 9, 1, 6, 
        9, 1, 9, 7, 1, 8, 7, 1, 9, 9, 1, 7, 8, 1, 7, 10, 1, 7, 9, 1, 7, 9, 1, 7, 9, 9, 7, 1, 9, 8, 1, 8, 8, 10, 8, 2, 7, 8, 1, 7, 7, 9, 9, 1, 10, 9, 1, 8, 8, 9, 8, 1, 7, 8, 2, 7, 6, 9, 8, 2, 7, 9, 1, 8, 6, 9, 8, 3, 7, 6, 2, 7, 7, 8, 7, 1, 8, 
        7, 2, 6, 8, 7, 8, 2, 8, 8, 9, 9, 2, 8, 7, 3, 5, 8, 4, 5, 2, 6, 3, 5, 3, 6, 3, 6, 3, 6, 5, 3, 3, 7, 3, 3, 1, 3, 1, 6, 
        1, 3, 4, 5, 5, 3, 2, 3, 3, 4, 4, 2, 2, 1, 3, 1, 3, 5, 4, 2, 4, 6, 1, 2, 1, 2, 2, 4, 6, 2, 2, 4, 3, 5, 5, 3, 3, 3, 4, 
        3, 3, 1, 1, 1, 4, 7, 2, 3, 1, 3, 1, 1, 3, 6, 3, 4, 5, 5, 4, 6, 4, 4, 2, 2, 1, 2, 2, 3, 4, 2, 1, 3, 1, 3, 3, 4, 2, 2, 
        2, 4, 3, 3, 2, 1, 4, 4, 3, 3, 4, 2, 3, 3, 3, 2, 6, 1, 3, 2, 2, 3, 5, 3, 2, 4, 3, 4, 5, 2, 4, 4, 1, 4, 5, 1, 3, 1, 4, 
        2, 2, 4, 2, 2, 3, 1, 4, 1, 2, 3, 1, 2, 4, 4, 3, 2, 3, 3, 3, 1, 6, 1, 2, 3, 2, 3, 5, 3, 1, 3, 2, 4, 1, 2, 2, 1, 4, 2, 
        2, 1, 1, 1, 1, 3, 5, 3, 3, 3, 3, 3, 4, 3, 3, 1, 3, 1, 3, 6, 1, 3, 1, 4, 2, 2, 4, 2, 2, 2, 1, 2, 4, 1, 1, 3, 5, 1, 3, 
        3, 2, 1, 5, 1, 3, 3, 6, 1, 3, 2, 1, 2, 5, 3, 3, 3, 7, 3, 2, 5, 5, 4, 5, 3, 1, 3, 4, 4, 3, 5, 3, 5, 3, 4, 3, 2, 3, 6, 
        4, 3, 4, 5, 3, 4, 3, 6, 3, 5, 3, 4, 4, 2, 3, 5, 4, 3, 3, 5, 3, 5, 2, 5, 3, 5, 4, 4, 3, 5, 3, 5, 4, 2, 4, 4, 4, 3, 3, 
        5, 3, 5, 3, 5, 4, 5, 4, 4, 3, 5, 2, 4, 3, 4, 4, 4, 4, 4, 3, 4, 3, 5, 4, 3, 4, 5, 3, 4, 4, 2, 2, 5, 5, 4, 5, 2, 4, 5, 
        2, 1, 4, 29, 16, 15, 13, 17, 14, 20, 50, 1, 1, 1, 32, 14, 16, 14, 18, 1, 2, 1, 31, 15, 19, 2, 2, 1, 31, 1, 2, 3, 31, 
        17, 1, 28, 3, 14, 1, 1, 1, 32, 16, 16, 16, 17, 19, 15, 17, 16, 17, 43, 1, 1, 3, 2, 1, 2, 3, 17, 16, 16, 8, 9, 10, 7, 
        8, 7, 7, 8, 8, 5, 6, 6, 5, 7, 7, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 5, 11, 1, 1, 1, 1, 1, 1, 1, 19, 19, 13, 1, 1, 1, 1, 1, 1, 3, 35, 1, 1, 1, 1, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 32, 17, 17, 15, 16, 17, 20, 35, 2, 5, 1, 4, 4, 4, 2, 5, 3, 2, 3, 4, 2, 3, 1, 4, 3, 2, 3, 5, 4, 3, 1, 4, 1, 4, 2, 5, 2, 3, 1, 5, 1, 3, 1, 6, 2, 3, 2, 5, 2, 4, 1, 4, 2, 3, 2, 5, 1, 3, 1, 5, 1, 4, 2, 5, 1, 4, 1, 5, 1, 4, 1, 6, 1, 3, 2, 6, 1, 5, 2, 4, 1, 5, 1, 4, 1, 5, 2, 3, 2, 5, 2, 5, 2, 3, 2, 6, 1, 3, 2, 4, 2, 3, 1, 5, 2, 4, 1, 5, 1, 1, 3, 6, 1, 3, 2, 5, 1, 5, 1, 4, 1, 6, 2, 5, 1, 5, 2, 4, 1, 5, 1, 5, 1, 4, 1, 5, 2, 5, 1, 5, 1, 4, 1, 3, 1, 6, 2, 3, 3, 4, 2, 15, 18, 14, 13, 20, 2, 16, 17, 37, 2, 2, 1, 2, 1, 2, 1, 3, 2, 1, 3, 1, 3, 1, 1, 2, 4, 1, 2, 1, 2, 2, 1, 2, 3, 1, 3, 2, 2, 3, 2, 1, 1, 3, 2, 2, 2, 3, 3, 2, 1, 3, 3, 1, 2, 3, 4, 1, 2, 2, 1, 2, 1, 2, 2, 4, 3, 2, 1, 1, 1, 2, 2, 2, 3, 1, 2, 2, 2, 2, 1, 2, 3, 4, 1, 2, 2, 1, 3, 1, 1, 3, 3, 1, 1, 3, 1, 1, 1, 1, 1, 2, 4, 1, 1, 2, 2, 2, 1, 3, 5, 1, 1, 1, 4, 2, 1, 2, 4, 1, 2, 1, 1, 2, 2, 2, 2, 5, 1, 1, 7, 1, 1, 3, 1, 5, 1, 2, 2, 2, 1, 2, 1, 2, 1, 5, 1, 1, 4, 1, 3, 1, 2, 1, 2, 2, 1, 1, 2, 5, 1, 2, 2, 3, 1, 1, 3, 5, 1, 1, 4, 1, 1, 2, 3, 4, 1, 1, 3, 5, 1, 1, 2, 3, 1, 1, 4, 4, 1, 2, 2, 2, 1, 3, 2, 1, 5, 1, 1, 2, 3, 1, 3, 2, 4, 1, 1, 2, 4, 1, 1, 3, 1, 1, 1, 1, 1, 1, 5, 2, 1, 3, 2, 1, 1, 4, 1, 4, 1, 1, 1, 1, 4, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 13, 17, 16, 17, 15, 18, 17, 17, 1, 
        6, 11, 8, 11, 1, 6, 9, 9, 10, 1, 4, 7, 1, 7, 3, 4, 2, 2, 1, 5, 2, 4, 3, 3, 5, 2, 2, 4, 3, 3, 1, 4, 3, 1, 4, 4, 5, 3, 
        3, 4, 4, 3, 2, 3, 4, 6, 2, 3, 4, 6, 1, 2, 1, 3, 3, 2, 1, 5, 2, 2, 2, 1, 1, 3, 2, 1, 5, 2, 2, 3, 3, 2, 1, 3, 3, 2, 2, 
        3, 1, 2, 6, 1, 2, 5, 3, 5, 2, 4, 4, 6, 2, 3, 1, 1, 2, 4, 6, 2, 4, 4, 6, 2, 2, 1, 3, 4, 5, 2, 4, 4, 2, 3, 5, 2, 3, 4, 
        6, 1, 3, 1, 3, 2, 6, 2, 3, 6, 2, 4, 2, 3, 2, 3, 3, 7, 3, 2, 5, 2, 2, 3, 1, 3, 3, 1, 2, 4, 1, 3, 2, 1, 2, 4, 2, 2, 2, 
        1, 3, 3, 1, 3, 5, 3, 3, 3, 1, 3, 11, 4, 1, 3, 5, 2, 2, 1, 2, 1, 5, 1, 1, 3, 2, 1, 5, 2, 1, 1, 3, 14, 3, 1, 4, 2, 6, 2, 1, 2, 4, 2, 2, 4, 1, 1, 2, 5, 3, 2, 3, 2, 3, 7, 6, 1, 3, 1, 2, 5, 3, 5, 2, 2, 1, 3, 3, 2, 4, 4, 6, 2, 7, 3, 2, 1, 4, 4, 8, 2, 3, 1, 5, 3, 4, 2, 2, 6, 1, 2, 3, 2, 2, 3, 3, 3, 2, 4, 2, 3, 6, 3, 5, 2, 2, 5, 4, 7, 2, 2, 5, 1, 2, 3, 1, 2, 6, 3, 3, 3, 2, 2, 6, 3, 2, 4, 2, 1, 7, 1, 1, 6, 1, 2, 3, 1, 5, 1, 1, 2, 5, 1, 1, 3, 4, 1, 1, 3, 2, 2, 1, 3, 6, 1, 2, 3, 3, 1, 1, 2, 4, 1, 3, 3, 1, 2, 2, 1, 5, 1, 1, 3, 1, 4, 1, 2, 3, 5, 1, 1, 3, 2, 2, 1, 1, 3, 6, 1, 2, 3, 2, 1, 1, 1, 2, 5, 1, 1, 2, 2, 2, 1, 2, 5, 2, 1, 5, 1, 1, 3, 1, 2, 1, 2, 3, 4, 1, 2, 2, 3, 3, 1, 2, 3, 4, 1, 1, 3, 3, 5, 2, 2, 2, 5, 1, 3, 2, 4, 3, 1, 5, 2, 2, 5, 2, 2, 5, 2, 3, 4, 2, 6, 3, 6, 4, 6, 3, 3, 4, 2, 5, 2, 6, 2, 6, 3, 3, 1, 4, 3, 4, 3, 8, 1, 2, 5, 3, 3, 4, 2, 3, 4, 2, 2, 4, 3, 2, 2, 2, 3, 3, 1, 1, 6, 3, 7, 2, 4, 2, 1, 4, 3, 5, 3, 6, 4, 7, 1, 1, 5, 1, 2, 1, 4, 3, 2, 4, 2, 3, 4, 2, 3, 1, 4, 3, 5, 2, 2, 5, 2, 3, 5, 2, 2, 7, 3, 6, 3, 7, 2, 2, 6, 4, 6, 1, 7, 3, 2, 6, 3, 7, 1, 2, 5, 2, 6, 2, 5, 2, 1, 6, 2, 6, 2, 6, 3, 1, 2, 4, 3, 4, 1, 1, 1, 1, 5, 1, 2, 3, 2, 2, 2, 1, 5, 1, 1, 3, 3, 2, 2, 3, 1, 2, 2, 1, 2, 4, 1, 2, 3, 1, 5, 1, 1, 3, 3, 2, 1, 5, 3, 1, 1, 2, 3, 2, 2, 2, 6, 1, 1, 3, 1, 1, 2, 2, 2, 3, 4, 1, 1, 3, 2, 1, 1, 2, 5, 2, 3, 3, 1, 2, 2, 1, 3, 1, 3, 1, 3, 4, 2, 2, 2, 2, 3, 1, 1, 2, 6, 1, 2, 2, 4, 1, 1, 2, 2, 1, 2, 3, 3, 1, 2, 3, 2, 1, 2, 2, 3, 1, 3, 3, 1, 2, 1, 2, 3, 4, 2, 3, 3, 2, 1, 2, 2, 4, 1, 1, 4, 1, 2, 2, 1, 2, 3, 2, 2, 2, 3, 3, 1, 3, 3, 2, 3, 3, 4, 2, 2, 2, 4, 2, 1, 3, 1, 3, 2, 2, 4, 3, 1, 2, 3, 4, 2, 2, 2, 4, 1, 1, 4, 4, 1, 2, 2, 4, 1, 3, 2, 3, 1, 1, 2, 5, 2, 1, 4, 4, 1, 3, 3, 5, 1, 1, 4, 1, 1, 3, 3, 3, 1, 2, 3, 5, 2, 2, 4, 3, 1, 3, 3, 3, 2, 1, 4, 4, 1, 2, 3, 4, 1, 2, 3, 6, 1, 1, 4, 2, 2, 2, 1, 5, 1, 2, 4, 3, 2, 1, 1, 2, 5, 1, 2, 4, 4, 1, 1, 4, 1, 5, 2, 2, 3, 2, 1, 1, 3, 5, 1, 2, 2, 4, 1, 1, 4, 5, 2, 1, 4, 2, 2, 1, 4, 4, 1, 3, 2, 2, 2, 1, 4, 2, 2, 2, 2, 3, 2, 2, 3, 1, 1, 2, 3, 3, 3, 3, 2, 2, 3, 2, 1, 2, 4, 3, 2, 1, 3, 1, 2, 1, 1, 3, 3, 2, 2, 2, 1, 4, 1, 1, 3, 5, 1, 2, 3, 1, 2, 1, 1, 4, 3, 2, 1, 4, 3, 1, 1, 4, 2, 2, 2, 4, 1, 1, 3, 6, 2, 2, 4, 3, 1, 1, 2, 4, 3, 2, 1, 4, 1, 1, 3, 2, 3, 1, 2, 2, 3, 2, 1, 1, 3, 4, 1, 1, 3, 1, 3, 1, 1, 1, 4, 4, 1, 3, 3, 4, 4, 55]



    ,11 :  [308, 40, 21, 65, 37, 38, 39, 137, 19, 86, 21, 20, 36, 19, 42, 18, 44, 37, 60, 41, 41, 41, 123, 19, 154, 37, 38, 23, 46, 40, 61, 35, 40, 42, 131, 19, 85, 21, 22, 36, 21, 40, 19, 43, 40, 62, 43, 40, 39, 418, 37, 17, 64, 43, 42, 41, 45, 20, 44, 37, 84, 23, 20, 41, 21, 42, 20, 42, 38, 63, 38, 40, 40, 133, 19, 147, 39, 38, 23, 43, 38, 61, 40, 38, 41, 40, 23, 46, 41, 82, 20, 23, 41, 20, 37, 19, 44, 41, 66, 39, 37, 41, 336, 22, 15, 20, 43, 39, 64, 22, 44, 18, 20, 20, 43, 19, 41, 42, 89, 18, 20, 17, 21, 20, 61, 
        21, 21, 18, 21, 21, 42, 19, 22, 18, 43, 57, 110, 21, 41, 17, 47, 18, 20, 21, 37, 21, 66, 40, 38, 20, 40, 39, 66, 20, 43, 42, 146, 40, 38, 22, 39, 43, 21, 40, 20, 42, 40, 394, 42, 40, 43, 40, 43, 38, 48, -1, 41, 40, 40, 43, 59, 65, 44, -1, 38, 40, 42, 42, 41, 38, 42, 40, 42, 21, 63, 42, 65, 52, 45, 41, 21, 42, 42, 106, 38, 43, 61, 60, 44, 41, 22, 39, 56, 134, 23, 18, 61, 59, 38, 42, 24, 44, 60, 206, 41, 43, 38, 40, 40, 37, 172, 39, 64, 58, 42, 133, 40, 39, 38, 41, 44, 40, 22, 146, 39, 41, 42, 42, 21, 40, 40, 60, 39, 38, 42, 42, 27, 45, 40, 64, 41, 40, 40, 42, 22, 37, 40, 62, 42, 34, 41, 2762, 41, 18, 61, 38, 41, 38, 41, 18, 45, 42, 82, 21, 21, 42, 22, 40, 20, 42, 42, 58, 39, 42, 38, 135, 38, 125, 40, 41, 22, 41, 40, 64, 39, 38, 21, 19, 42, 18, 42, 44, 85, 20, 18, 43, 20, 40, 22, 40, 39, 62, 42, 40, 40, 86, 83, 84, 77, 18, 19, 20, 46, 44, 65, 21, 44, 37, 22, 40, 22, 38, 41, 81, 21, 20, 20, 20, 22, 69, 20, 20, 20, 21, 21, 39, 22, 37, 40, 62, 105, 23, 42, 20, 38, 20, 20, 18, 42, 19, 20, 41, 40, 44, 20, 19, 25, 41, 20, 39, 22, 43, 41, 140, 19, 22, 46, 21, 60, 39, 43, 21, 42, 37, 398, -1, 42, 38, 42, 38, 43, 42, 44, -1, 42, 37, 42, 36, 73, 58, 41, 131, 38, 41, 38, 36, 43, 43, 23, 63, 39, 61, 61, 42, 42, 21, 43, 41, 101, 43, 41, 62, 67, 38, 42, 20, 42, 52, 133, 20, 19, 59, 62, 43, 40, 21, 43, 40, 234, 34, 40, 42, 40, 39, 43, 168, 42, 61, 68, 38, 125, 39, 40, 38, 42, 48, 43, 19, 147, 39, 41, 40, 42, 18, 45, 40, 64, 42, 38, 41, 40, 21, 40, 39, 63, 39, 41, 46, 40, 21, 40, 39, 61, 44, 44, 38, 333, 2714, 40, 36, 43, 
        42, 42, 39, 84, 42, 40, 41, 38, 39, 43, 90, 40, 37, 44, 39, 42, 42, 88, 39, 40, 38, 40, 38, 42, 85, 39, 40, 43, 39, 41, 44, 87, 39, 42, 43, 41, 38, 45, 81, 40, 40, 42, 42, 40, 43, 87, 39, 41, 39, 42, 38, 
        41, 42, 43, 39, 43, 43, 42, 35, 44, 168, 39, 65, 59, 37, 133, 40, 41, 42, 37, 42, 43, 19, 61, 41, 65, 
        54, 43, 43, 21, 44, 41, 62, 37, 41, 82, 40, 43, 41, 42, 22, 40, 61, 138, 19, 18, 54, 63, 38, 43, 21, 43, 56, 217, 36, 41, 40, 38, 42, 43, 168, 41, 66, 62, 38, 79, 42, 43, 38, 44, 39, 41, 44, 19, 152, 41, 
        40, 39, 39, 20, 40, 41, 65, 39, 41, 39, 42, 20, 39, 41, 69, 42, 40, 39, 45, 17, 42, 46, 68, 34, 37, 40, 130, 41, 62, 64]
         


}



const Absolute_songdatalist = song_data_list



let current_beat = 0;



let pattern_list = {

    1 : '1234',

    2 : '3412',

    3 : '2323',

    4 : "2343",

    5 : "1432",

    6 : "1423",

    7 : "2323",

    8 : '3241',

    9 : '1243',

    10 : '4312',

    11 : 'L023'

}

let current_pattern = 1;



// 0, 1, 2, 3 반복, 3일때는 패턴을 다시 뽑기

let current_pattern_beat = 0;







let current_color = "white";







let notetimer;





let combo = 0

let max_combo = 0





/** 상태 0 : 환경설정

 * 상태 1 : 곡 설정

 * 상태 2 : 곡 상세화면

 * 상태 3 : 게임 중

 * 상태 4 : 게임 결과 화면 

 */

let state = 0;



let frame = 120; // 120 fps





// 노트 형식



// [위치(1,2,3,4) , y좌표 ]



// 



let notes_list = []





let longnote_list = [] // 4, y좌표(-400부터 시작, 100일때 PerFect)



let long_note_exist = false;

let long_note_location = 4;





let Perfectplus = 0;

let ELperfect = 0;

let EarlyLate = 0;

let Miss = 0;



// 판정



// 엄격 : Early! Late! 기준이 매우 줄어듦.



// 보통 : 기본값



// 느슨 : Early 기준 = 













let play_backgroundimages;


let player_highscore = {
    1 : null
}



let hawi = {
    
}


//123


// 데이터베이스 통신 기능 모음

const signupbutton = document.getElementById('signupbutton');
const loginbutton = document.getElementById('loginbutton');

const idinput = document.getElementById('idinput');
const pwinput = document.getElementById('pwinput');



const key_01_button = document.getElementById('key_01')
const key_02_button = document.getElementById('key_02')
const key_03_button = document.getElementById('key_03')
const key_04_button = document.getElementById('key_04')


let key_01 = 'e'
let key_02 = 'f'
let key_03 = 'j'
let key_04 = 'o'

let key_change_stat = {
    1 : 0,
    2 : 0,
    3 : 0,
    4 : 0
}






let user_name;

/** type : 1이면 회원가입, 2이면 로그인하기 */
async function SignUpandLogin(type){
    user_name = idinput.value;
    userpw = pwinput.value;



    if(type == 1){
        // 회원가입

        

        if(user_name.length > 9){
            alert('8자 이내로 설정해주세요.');
            return;
        } else if(user_name.includes('*') || user_name.includes('+')){
            alert('포함하면 안 되는 단어를 포함하고 있습니다.');
            return;
        }

        try {
                // Add document
                await setDoc(doc(collection(db, "users"), user_name + userpw), {
                    

                    id : user_name,
                    pw : userpw,
                    map1_best : 0,
                    map2_best : 0,
                    map3_best : 0,
                    map4_best : 0,
                    map5_best : 0,
                    map6_best : 0,

                    map7_best : 0,
                    map8_best : 0,

                    map9_best : 0,
                    map10_best : 0





                });
                alert('회원가입 성공')
                
            } catch (e) {
                console.error("Error adding document: ", e);
            }






    } else if(type == 2){

        // 로그인
        // 전체 "users" 컬렉션의 문서들을 가져오는 부분
        const querySnapshot = await getDocs(collection(db, 'users'));

        try {
            var userDocId = user_name + userpw;
            var docRef = doc(db, 'users', userDocId);

            // 특정 문서의 데이터 가져오기
            const docSnapshot = await getDoc(docRef);

            if (docSnapshot.exists()) {
                const userData = docSnapshot.data();

                for (let i = 1; i <= 10; i++) {
                    player_highscore[i] =  userData[`map${i}_best`];


                    if(!player_highscore[i]){
                        player_highscore[i] = 0;

                        try {
                            // Add document
                            await setDoc(doc(collection(db, "users"), user_name + userpw), {
                                
            
                                id : user_name,
                                pw : userpw,
                                map1_best : player_highscore[1],
                                map2_best : player_highscore[2],
                                map3_best : player_highscore[3],
                                map4_best : player_highscore[4],
                                map5_best : player_highscore[5],
                                map6_best : player_highscore[6],
            
                                map7_best : 0,
                                map8_best : 0,
                                map9_best : 0,
                                map10_best : 0
            
            
            
            
            
                            });
                            
                            
                        } catch (e) {
                            console.error("Error adding document: ", e);
                        }
                    }





                }
                alert('로그인 성공')


                hawi = {
                        1:0,
                        2:0,
                        3:0,
                        4:0,
                        5:0,
                        6:0,
                        7:0,
                        8:0,
                        9:0,
                        10:0

                    }


                querySnapshot.forEach((doc) => {

                    // doc.id() doc.data()
                    // 랭킹 구하기

                    

                    for(let i=1; i<=10; i++){

                        // 만약 스코어가 나보다 높다면

                        //console.log(doc.data()[`map${i}_best`])
                        //console.log(player_highscore[i])

                        if(Number(player_highscore[i]) < Number(doc.data()[`map${i}_best`]) ){

                            Ranking[i]++;

                        } else{
                            hawi[i]++;
                        }

                        



                    }
                    

                    

                    



                });  














              
            } else {
                console.log("문서가 존재하지 않습니다.");
                alert('로그인 실패')
            }

        } catch (e) {
            alert('로그인 실패. 아이디와 비밀번호를 확인하세요.');
            console.error(e);
        }





    }


}








async function fetchData() {



    try{

        const querySnapshot = await getDocs(collection(db, "Code"));

        let i = 1

    

        querySnapshot.forEach((doc) => {

        highscores[i] = Number(doc.data()['1'])

        firstname[i] = doc.data()['name']

        



        







        // console.log(doc.data()['1'])

        





        // console.log(doc.data())

        

        

        i++

      

      // 여기에서 가져온 데이터를 활용하여 원하는 작업을 수행할 수 있습니다.

    });

    console.log(highscores)

    console.log(firstname)

    } catch(error){

        alert('에러가 발생했습니다. 네크워크 연결을 확인해주세요.')

        alert('게임은 정상적으로 플레이 가능하지만, 랭킹은 반영되지 않습니다.')

        for(let i=1; i<=10; i++){

            highscores[i] = "(알 수 없음)"

            firstname[i] = "(알 수 없음)"

            secondscores[i] = 'x'

            thirdname[i] = 'x'

            thirdscores[i]='x'

            secondname[i]='x'

        }

    }

    

}





fetchData()





function randint(a, b){

    return Math.floor( (b-a) * Math.random() + a )

}







function Rank(p){


    if(p > 100){

        return 'GrandMaster!'

    } else if(p == 100){

        return 'Pure Perfect!'

    } else if(p >= 99.8){

        return 'SSS+'

    } else if(p >= 99.7){

        return 'SSS'

    } else if(p >= 99.6){

        return 'SSS-'

    } else if(p >= 99.5){

        return 'SS+'

    } else if(p >= 99.4){

        return 'SS'

    } else if(p >= 99.3){

        return 'SS-'

    } else if(p >= 99){

        return 'S+'

    } else if(p >= 98){

        return 'S'

    } else if(p >= 97){

        return 'S-'

    } else if(p >= 95){

        return "A+"

    } else if(p >= 93){

        return 'A'

    } else if(p >= 92){

        return 'A-'

    } else if(p >= 90){

        return 'B+'

    } else if(p >= 85){

        return 'B'

    } else if(p >= 80){

        return 'B-'

    } else if(p >= 77){

        return 'C+'

    } else if(p >= 75){

        return 'C'

    } else if(p >= 70){

        return 'C-'

    } else if(p >= 60){

        return 'D'

    } else if(p >= 40){

        return 'F'

    } else if(p >= 20){

        return 'F-'

    } else if(p > 0){

        return 'F--'

    } else{

        return 'FFF'

    }







}







let backgroundimages







function init() {

    background0image = new Image();

    background0image.src = "images/background_setting.png";



    let backgroundimage_1 = new Image();

    backgroundimage_1.src = "images/beautiful-sky.png";



    let backgroundimage_2 = new Image();

    backgroundimage_2.src = "images/background-prepare.png";



    let backgroundimage_3 = new Image();

    backgroundimage_3.src = "images/background-play.png";





    let backgroundimage_nature = new Image();

    backgroundimage_nature.src = "images/nature-1.jpg";





    let background_plumr = new Image();

    background_plumr.src = 'images/plumR.jpg';



    let background_naturenight = new Image();

    background_naturenight.src = 'images/nature.jpg'



    let background_linearity = new Image();

    background_linearity.src = 'images/art.jpg'



    let backgroundimage_NJ = new Image();
    backgroundimage_NJ.src = 'images/hobby1.jpg'

    let backgroundimage_LS = new Image();
    backgroundimage_LS.src = 'images/hobby2.jpg'

    let backgroundimage_timeline = new Image();
    backgroundimage_timeline.src = 'images/bgtimeline.jpg'

    let backgroundimage_rain = new Image();
    backgroundimage_rain.src = 'images/rainbowchaser.jpg'

    let backgroundimage_selfmade = new Image();
    backgroundimage_selfmade.src = 'images/Selfmade.jpg'


    let backgroundimage_song9 = new Image();
    backgroundimage_song9.src = 'images/christmas.jpg'

    let backgroundimage_hidden1 = new Image();
    backgroundimage_hidden1.src = 'images/plumfinding.jpg'



    backgroundimages = [background0image , backgroundimage_1 , backgroundimage_2, backgroundimage_3]



    play_backgroundimages = {



        1 : backgroundimage_nature,

        2 : backgroundimage_NJ,

        3 : backgroundimage_LS,

        4 : background_plumr,

        5 : background_linearity,

        6 : background_naturenight,
        
        7 : backgroundimage_timeline,

        8 : backgroundimage_rain,

        9 : backgroundimage_song9,

        10 : backgroundimage_selfmade,

        11 : backgroundimage_hidden1



    }





    let line = new Image();

    line.src = "images/line.jpg"





    let characterimage = new Image();

    characterimage.src = "images/icons8-space-60.png";







    noteimage = new Image();

    noteimage.src = "images/note2.png";





    let long_note_image = new Image();

    long_note_image.src = "images/longnote.png";











    background0image.onload = function () {

        render();

    };

}



function render() {



    if(state == 0 || state == 2 ){

        ctx.drawImage(backgroundimages[state], 0, 0, canvas.width, canvas.height);

    } else{



        ctx.drawImage(play_backgroundimages[selected_song], 0, 0, canvas.width, canvas.height)

        

    } 

    

    // 캐릭터 이미지 그리기 또는 기타 렌더링 작업 수행





    // 상태에 따라서 다르게 하기







    if(state === 0){





        ctx.fillText(`오프셋 : ${offset}ms`, canvas.width / 2, 220);











    } else if(state === 1){



        ctx.fillStyle = 'yellow'



        ctx.font = "40px arial";

        if(selected_song < 11){
            ctx.fillText(`곡 선택 | Songs`, canvas.width / 2, 60)
        } else if(selected_song == 11){
            ctx.fillText(`히든 곡 선택 | Songs`, canvas.width / 2, 60)
        }



        





        ctx.font = "30px arial";





        ctx.fillText(`${songs_list_name[selected_song]}`, canvas.width / 2, 200)



        if(selected_song == 10){
            ctx.font = '28px Arial';
            ctx.fillStyle = 'red'
            
        }




        ctx.fillText(`난이도 : ${songs_list_difficulty[selected_song]}`, canvas.width / 2, 260)


        if(selected_song == 10){
            ctx.fillText(`플레이하지 않기를 권장합니다.`, canvas.width/2, 380)

        }



        if(selected_song == 10){
            ctx.font = '30px Arial';
            ctx.fillStyle = 'yellow'
            ctx.fillText(`랭킹이 표시되지 않습니다`, canvas.width / 2, 500)
        }


        
        


        ctx.fillText(`BPM : ${songs_basicbpm[selected_song]} ~ ${songs_bpm[selected_song]}`, canvas.width/2, 320)


        


        if(selected_song != 1 && selected_song < 9){

            ctx.fillText(`<이전(F)                     (J)다음>`, canvas.width/2, 440)

        } else if(selected_song==1){

            ctx.fillText(`                                (J)다음>`, canvas.width/2, 440)

        } else{

            ctx.fillText(`<이전(F)                                  `, canvas.width/2, 440)

        }





       

        if(selected_song < 10){
            ctx.fillText(`1위 : ${firstname[selected_song]}(${highscores[selected_song]}%)`, canvas.width/2, 490)

        } if(selected_song == 11){
            ctx.fillText('이걸 찾아내다니 대단해요...', canvas.width/2, 540)
        }



        

        if(user_name && selected_song < 11){

            if(Ranking[selected_song] == 1 ){
                ctx.fillText(`나의 랭킹 : ${Ranking[selected_song]}위/${(Ranking[selected_song] + hawi[selected_song])}`, canvas.width/2, 570 )
            } else{
                ctx.fillText(`나의 랭킹 : ${Ranking[selected_song]}위(상위 ${( Ranking[selected_song]  / (Ranking[selected_song] + hawi[selected_song])*100).toFixed(2) }%)`, canvas.width/2, 570 )
            }
           

            console.log(hawi)

            ctx.fillText(`내 최고 정확도 : ${player_highscore[selected_song]}%`, canvas.width/2, 530)
        } else if(selected_song != 11){

            ctx.fillText(`비로그인 상태입니다`, canvas.width/2, 570 )
        
        }


        







    } else if(state === 2){



    } else if(state === 3){

        

    } else if(state === 4){



    }



    











}





function note_render(code = null){



    



    if(current_beat >= song_data_list[selected_song].length){



        setTimeout(() => {

                phase_transition();

                

                clearInterval(notetimer)  

        }, 3000);



        

    }



    ctx.drawImage(play_backgroundimages[selected_song], 0, 0,canvas.width, canvas.height )





    ctx.drawImage(line, 0, 495)













    ctx.fillText(`${judge_font_txt}`, canvas.width / 2, 300);





    // 여기에 고정 추가



    ctx.font = '30px Georgia'

    ctx.fillStyle = "rgba(255, 255, 255, 0.7)"



    try{

        accuracy = ( Perfectplus*1 +  ELperfect * 0.8 + EarlyLate * 0.3  ) / (EarlyLate + ELperfect + Perfectplus + Miss) * 100;

        accuracy = accuracy.toFixed(2);

    } catch(e){

        accuracy = null

        console.error(e)

    }

    

    



    if(accuracy != NaN && 0<=accuracy && 100>=accuracy){



        if(accuracy == 100.00){

            ctx.fillStyle = "rgba(255, 255, 0, 0.8)"

            ctx.fillText(`Accuracy : Perfect!!`, canvas.width/2, 35)

        } else if(accuracy >= 90){

            ctx.fillStyle = "rgba(255, 255, 0, 0.7)"

            ctx.fillText(`Accuracy : ${accuracy}%(${Rank(accuracy)})`, canvas.width/2, 35)

        } else{

            ctx.fillText(`Accuracy : ${accuracy}%(${Rank(accuracy)})`, canvas.width/2, 35)

        }









        

    }



    





    ctx.fillStyle = current_color;

    



    ctx.font = `${current_textsize}px Georgia`

    









    if(fontsize_do_change){

        if(judge_font_size >= 40){

            fontsize_do_change = false;



            setTimeout(() => {

                ctx.font = `0px Georgia`

                current_textsize=0;

                

            }, 300);



        } else{

            judge_font_size *= 1.1

            ctx.font = `${judge_font_size}px Georgia`

            current_textsize = judge_font_size

        }

    }









    









    if(code == "start"){

        notetimer = setInterval(() => {



            

        note_render()

        

        }, 1000 * (1/120) / multiply[selected_song] );

    } // 타이머 설정 하기 



    for(let i = 0; i<notes_list.length; i++){

        notes_list[i][1] += 5 * falling_speed / multiply[selected_song]

                    

    }



    for(let i = 0; i<notes_list.length; i++){



        ctx.drawImage(noteimage, notes_list[i][0] * 100 , notes_list[i][1]);

        // console.log('sdf')





    }









    

    if(song_data_list[selected_song][current_beat] > 0){

        song_data_list[selected_song][current_beat]--;



    } else{

        current_beat++;



        console.log(current_beat)



        // 노트 생성 하기



        // 패턴에 따라서 생성 하기



        if(song_data_list[selected_song][current_beat]){



            if(current_pattern_beat === 3){

                now_beat_ptrn = pattern_list[current_pattern][current_pattern_beat] ;

                current_pattern_beat = 0;





                current_pattern = randint(1, 11);





                if(selected_song === 5){

                    current_pattern = 1 + 6*(randint(1, 2))

                } else if(selected_song == 10){
                    current_pattern = 1
                }











            } else{

                now_beat_ptrn = pattern_list[current_pattern][current_pattern_beat];

                current_pattern_beat++;

            }



            



            

            

            



            // 패턴 정함. 이제 패턴을 만들기



            if(now_beat_ptrn == 'D'){

                // D : E, F 둘 다 생성하기

                notes_list.push([1,0]);

                //notes_list.push([0,0]); // 둘다 푸쉬



            } else if(now_beat_ptrn == 'T'){

                // D : jo 둘 다 생성하기

                notes_list.push([2,0]);

                //notes_list.push([3,0]) // 둘다 푸쉬

            } else if(now_beat_ptrn == '0'){



            } else{

                notes_list.push([ Number(pattern_list[current_pattern][current_pattern_beat]) - 1 , 0 ]);

                

            }

            

            

            

            



























        } else{

            if(!notes_list && current_beat >= song_data_list[selected_song].length){

                // 곡 종료

                phase_transition();

                //타이머 종료

                clearInterval(notetimer)







                return;



            }

        }

     













        

    }



    if(!notes_list && current_beat >= song_data_list[selected_song].length){

        // 곡 종료

        phase_transition();

        //타이머 종료

        clearInterval(notetimer)







        return;



    }







    // pop

    // [0,234]

    for(let i=0; i<notes_list.length; i++){

        



        if(notes_list[i][1] >= 575){ // Miss

            console.log(notes_list[i] && (!notes_list[i][0] != NaN || notes_list[i] == 0))

            notes_list.splice(i, 1);

            

            judge("Miss..",255, 255, 255, 0.61)

            Miss++;

            combo = 0;

            







        }





    }











    



    















    





}



async function SaveNewBest(a1=player_highscore[1],a2 = player_highscore[2],a3 = player_highscore[3],   a4 = player_highscore[4],a5 = player_highscore[5],a6 = player_highscore[6], a7=player_highscore[7], a8=player_highscore[8]){


        try {
            // Add document
            await setDoc(doc(collection(db, "users"), user_name + userpw), {
                

                id : user_name,
                pw : userpw,
                map1_best : a1,
                map2_best : a2,
                map3_best : a3,
                map4_best : a4,
                map5_best : a5,
                map6_best : a6,
                map7_best : a7,
                map8_best : a8




            });
            const querySnapshot = await getDocs(collection(db, 'users'));

            querySnapshot.forEach((doc) => {

                // doc.id() doc.data()
                // 랭킹 구하기

                hawi = {
                    1:0,
                    2:0,
                    3:0,
                    4:0,
                    5:0,
                    6:0,
                    7:0,
                    8:0,
                    9:0,
                    10:0

                }

                for(let i=1; i<=10; i++){

                    // 만약 스코어가 나보다 높다면

                    console.log(doc.data()[`map${i}_best`])
                    console.log(player_highscore[i])

                    if(Number(player_highscore[i]) < Number(doc.data()[`map${i}_best`]) ){

                        Ranking[i]++;

                    } else{
                        hawi[i]++;
                    }

                    



                }
                

                

                



            });  
            
            
        } catch (e) {
            console.error("Error adding document: ", e);
        }






    }


async function phase_transition(){



    line = new Image();

    line.src = 'images/line.jpg'



    if(state === 0){



        state = 1;

        Songplaypause(0, 1)

        render()

        document.getElementById('login_page').style.display ='none'
       








    } else if(state === 1){

        state = 2;

        song_audios_list[selected_song].pause()

        render()



    } else if(state === 2){

        state = 3;

        ctx.font = "45px Georgia"

        render()

        ctx.drawImage(line, 0, 495)



        song_audios_list[selected_song].currentTime = 0;





        setTimeout(() => {

            song_audios_list[selected_song].play()

        }, 3000 );



        

        

        setTimeout(() => {



            note_render("start")



            

        }, + 3000 + 1000 * song_offsets[selected_song] + offset); // 플레이어 직접 설정 오프셋을 한 것을 추가하기.





    } else if(state === 3){

        state = 4;





        accuracy = ( Perfectplus*1 +  ELperfect * 0.8 + EarlyLate * 0.3  ) / (EarlyLate + ELperfect + Perfectplus + Miss) * 100;

        accuracy = accuracy.toFixed(2);



        if(selected_song < 10)
        {
                if(accuracy > player_highscore[selected_song]){
                player_highscore[selected_song] = accuracy
            }
            // const docRef = doc(collection(db, "users", user_name + userpw));
            try {
                // Add document



                if(!user_name){
                    alert('로그인이 되어있지 않습니다.')

                    if(confirm('로그인을 하시겠습니까?')){


                        user_name = prompt('아이디를 입력하세요.')
                        userpw = prompt('비밀번호를 입력하세요')

                        


                    }


                }

                

                let u = user_name + userpw

                
                if(true){
                    SaveNewBest(player_highscore[1], player_highscore[2], player_highscore[3], player_highscore[4], player_highscore[5], player_highscore[6])
                }





                
                
                
            } catch (e) {
                console.error("Error adding document: ", e);
                console.log(user_name, userpw)
                
                
            }
            
            
            
            
            
            
            
            
            
            
            







            if(accuracy > highscores[selected_song]){



                // 최고점 달성



            
                
                
                let playername = "익명"





                alert("축하합니다! Rank #1을 달성하셨습니다!")

                alert("최고 점수가 기록됩니다!")

                

                // let jogun = true;

                



                playername = user_name;





                try {

                    // Add document

                    await setDoc(doc(collection(db, "Code"), `${selected_song}`), {

                                

                        '1' : accuracy,

                        'name' : playername,


                    

                    });

                        

                                

                    } catch (e) {

                        alert("에러! 개발자에게 문의하세요." + e)

                        console.error("Error adding document: ", e);

                    }







            } 
        }
            



 


        ctx.font = "40px Georgia"

        ctx.fillStyle = "white"



        if(accuracy >= 90){

            ctx.fillStyle = 'yellow'

        } 

        if(accuracy < 30){

            ctx.fillStyle = 'red'

        }



        ctx.fillText(`정확도 : ${accuracy}%`, canvas.width / 2, canvas.height / 2 - 50);



        

        ctx.fillText(`Rank. ${Rank(accuracy)}`, canvas.width/2, canvas.height / 2 + 50)





        




        ctx.fillText(`Rank #${Ranking[selected_song]}`, canvas.width/2, canvas.height/2 + 100 )









    }







}





function press_key(keycode){





    if(notes_list.length == 0 && current_beat >= song_data_list[selected_song].length){

        // 곡 종료

        phase_transition();

        //타이머 종료

        clearInterval(notetimer)







        return;



    }





    // Late! 판별 545 ~ 575

    // LPerfect : 525 ~ 545

    // Perfect+ : 465 ~ 525

    // EPerfect : 445 ~ 465

    // Early! : 415 ~ 445  



    let ismiss = true



    for(let i=0; i<notes_list.length; i++){





        

        if((notes_list[i][1] > 545 && notes_list[i][1] <= 575) && notes_list[i][0] == keycode  ){

            // Late!

            combo = 0

            



           

            notes_list.splice(i, 1) // 없어짐.

            

            judge("Late!", 255, 22, 22, 0.6)

            ismiss = false;

            EarlyLate++
            break;

            









        } else if((notes_list[i][1] <= 545 && notes_list[i][1] > 525)&& notes_list[i][0] == keycode  ){

            // LPerfect

            notes_list.splice(i, 1) // 없어짐.

            combo++;

            judge(`LPerfect(${combo} Combo)`, 255, 255, 22, 0.6)

            ismiss = false;

            ELperfect++;
            break;





        } else if(notes_list[i][1] == 495.00  ){

            // Perfect++



            notes_list.splice(i, 1) // 없어짐.

            combo += 5

            judge(`Perfect++(${combo}Combo)`, 10, 10, 255, 0.82)

            ismiss = false;

            Perfectplus += 10
            break;





        }

        

        

        

        else if((notes_list[i][1] <= 525 && notes_list[i][1] >= 465) && notes_list[i][0] == keycode ){

            // Perfect+

            notes_list.splice(i, 1) // 없어짐.

            combo++

            judge(`Perfect+(${combo} Combo)`, 1, 255, 1, 0.6)

            ismiss = false;

            Perfectplus++;
            break;



        } 

        

        

        

        

        

        

        else if((notes_list[i][1] < 465 && notes_list[i][1] >= 445) && notes_list[i][0] == keycode ){

            // EPerfect

            combo++;

            notes_list.splice(i, 1) // 없어짐.

            judge(`EPerfect(${combo} Combo)`, 255, 255, 22, 0.6)

            ismiss = false;

            ELperfect++;
            break;





        } else if((notes_list[i][1] < 445 && notes_list[i][1] >= 415) && notes_list[i][0] == keycode ){

            // Early!

            notes_list.splice(i, 1) // 없어짐.

            combo = 0

            judge("Early!", 255, 22, 22, 0.6)

            ismiss = false;

            EarlyLate++;
            break;





        } else{

            // // Miss....

            // // 안없어짐. Miss만 출력

            // judge("Miss..", 255, 255, 255, 0.51)

            // console.log(notes_list[i][1])

        }







    }





    if(ismiss){

        judge("Miss..", 255, 255, 255, 0.61)

        combo = 0

        Miss++;

        

    }







}





// 변수 설정

let phase3_font_time = 0;

let judge_font_size_alter_timer = null;

let judge_font_txt = '';

let judge_font_size = 0



let fontsize_do_change = false







// f(x) = 2 ** (0.05)

// fx = 5* (2**(0.1 * x))

//0.3s만에 40px    

//0.1s일때 10px 시작



// f(3) = 40, f(1) = 10 ; f(x) = a * 2**x + c :. 2a+c=10 ; 8a+c=40; a=5 





function judge(message, r,g,b,a){



    try{

        clearTimeout(judge_font_size_alter_timer)

    } catch(e){

        //pass

        console.log("에러 발생. 개발자에게 문의하세요.")

    }



    

    fontsize_do_change = true;

    judge_font_size = 10;



    ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a})`



    current_color = `rgba(${r}, ${g}, ${b}, ${a})`



    ctx.font = `20px Georgia`;





    judge_font_txt = message



   











}



/** time : Second 단위 */

function judge_font_size_alter(message, time){

    if(time >= 0.3){

        ctx.font = `80px Georgia`;

        clearTimeout(judge_font_size_alter_timer)



    } else{

        ctx.font = `${10* (2**(10 * time))}px Georgia`;



        judge_font_size_alter_timer = setTimeout(() => {

            judge_font_size_alter(time + 1/6)

        }, 1/6);

        



        ctx.fillText(`${message}`, 50, 100);

        



    }

    

}





/** a와 b 사이에 x가 있으면 true, 아니면 false를 리턴 */

function inthemiddle(a,x,b){



    if(a<=x && b>=x){

        return true;

    } else{

        return false;

    }



}



/**증감 : +1 : 올라갈때, -1 : 내려갈때 */

function Songplaypause(plusnimus){



    if(song_audios_list[selected_song- plusnimus]){

        song_audios_list[selected_song- plusnimus].pause()

    }



    let ct;

    



    if(selected_song == 4){

        ct = 54;

    } else if(selected_song == 2){

        ct = 52

    } else if(selected_song == 1){

        ct = 60*2 + 43

    } else if(selected_song == 3){

        ct = 39

    } else if(selected_song == 5){

        ct = 0;

    } else if(selected_song == 6){

        ct =  192;

    } else if(selected_song == 7){
        ct = 80;
    } else if(selected_song==8){
        ct=80
    } else if(selected_song == 9){

        ct = 90
    } else if(selected_song == 10){
        ct = 89;
    } else{
        ct = 60 * 4 + 14
    }




    if(song_audios_list[selected_song]){

        song_audios_list[selected_song].currentTime = ct

        song_audios_list[selected_song].play(); 

    }

    









}





key_change_stat = {

}





document.addEventListener("keydown", (e) =>{




    if(key_change_stat[1] == 1 ||key_change_stat[2] == 1 ||key_change_stat[3] == 1 ||key_change_stat[4] == 1 ){

        // 키 바꾸기

        if(key_change_stat[1] == 1){
            key_01 = e.key;
            
            key_01_button.textContent = key_01;
            key_change_stat[1] = 0;


        } else if(key_change_stat[2] == 1){
            key_02 = e.key;
            
            key_02_button.textContent = key_02;
            key_change_stat[2] = 0;

        } else if(key_change_stat[3] == 1){
            key_03 = e.key;
            
            key_03_button.textContent = key_03;
            key_change_stat[3] = 0;

        } else if(key_change_stat[4] == 1){
            key_04 = e.key;
            
            key_04_button.textContent = key_04;
            key_change_stat[4] = 0;
        }




    }
    







    if(e.key == key_01 || e.key == key_02 || e.key == key_03 || e.key == key_04){

        if(state == 0){

            soundoffset.currentTime=0

            soundoffset.play();

        } else if(state == 1 || state == 2){

            soundclick.currentTime= 0

            soundclick.play()

        } if(state == 4){
            state = 0;
            
            ctx.font = '24px Arial'
            ctx.fillStyle = 'black'
            render()
            
        }

    }







    //console.log(e.key)

    if(e.key == key_01){

        if(state == 0 && !isshowingloginpage){

            if(isshowingloginpage){
                document.getElementById('login_page').style.display = 'none'
                isshowingloginpage = false;
            } else if(!isshowingloginpage){
                document.getElementById('login_page').style.display = 'block'
                isshowingloginpage = true;
            }

        }



        if(state == 2){

            phase_transition()

        } else if(state == 3){

            press_key(0)

        }





        













    } if(e.key == key_02){



        // state에 따른 분기문

        if(state === 0){

            offset--;

            render()

        } else if(state === 1){

            if(selected_song != 1){

                selected_song--;

                Songplaypause(-1)

                

            }

            

            render()









        } else if(state === 2){

            phase_transition()

        } else if(state === 3){

            press_key(1)

        }









    } if(e.key == key_03){





        if(state === 0){

            offset++;

            render()

        } else if(state === 1){



            if(selected_song != 9 && selected_song != 10){

                selected_song++;

                





                Songplaypause(1)

                render()



            } else if(selected_song == 9){

                if(warning_10 <= 0){
                    alert('10단계로 전송됩니다.')
                    selected_song = 10
                    Songplaypause(1);
                    render();
                } else if(warning_10 == 2){
                    alert('무슨 일인지 막혀있습니다...')
                    warning_10--
                    selected_song = 9
                } else if(warning_10 == 1){
                    alert('여기는 위험한 곳입니다.. 돌아가세요')
                    selected_song = 9
                    warning_10--;
                }





            }

        } else if(state === 2){

            phase_transition()

        } else if(state === 3){

            press_key(2)

        }









    } if(e.key == key_04){

        if(state == 0 && !isshowingloginpage){
            phase_transition()
        }

        else if(state == 1 ){
            phase_transition()
            

        } else if(state === 2){

            phase_transition()





            





        } else if(state === 3){

            press_key(3)

        }

        



    } if(e.key == '/'){

        alert("리듬게임 ver 2.0(최종 ver.)")

        document.querySelector('title').textContent = `rhythm-s By 우상` 

    } if(e.key == ';'){
        falling_speed += 0.5
        alert('히든 코드 발견! 노트가 떨어지는 속도를 0.5배 증가시킵니다.' + `현재 ${falling_speed}배`)
        

    } if(e.key == '\'' && hidden_finding_state == 0 ){

        try{
            if(user_name.slice(0, 2) == 'k' || true){
            alert('아주 미약한 어떤 조짐이 보입니다...')
            hidden_finding_state++;
        } else{}
            
        } catch(e){
            alert('숨겨진 키는 맞지만.. 조건이 부족해보입니다...')
            hidden_finding_state++
        
        }

        


        
    } if(e.key == '[' && hidden_finding_state == 1){


        if(confirm('숨겨진 곡에 대해 관심이 있나요?')){
            alert('미약한 어떤 조짐이 보입니다...')
            hidden_finding_state++;            
        }



    } if(e.key == ']' && hidden_finding_state == 2){
        alert('어떤 조짐이 보입니다...')
        hidden_finding_state++;
    } if(e.key == 'p' && hidden_finding_state == 3){
        alert('숨겨진 곡의 정체가 약간 밝혀집니다...(__ __)')
        hidden_finding_state++;
    } if(e.key == 'Q' && hidden_finding_state == 4){
        alert('곡이 점점 자취를 드러냅니다...(ㅊ_ __)')
        hidden_finding_state++;
    } if(e.key == '_' && hidden_finding_state == 5){
        alert('곡이 점점 자취를 드러냅니다...(ㅊ_ _ㅇ)')
        hidden_finding_state++;
    } if(e.key == '|' && hidden_finding_state == 6){
        alert('곡이 점점 자취를 드러냅니다...(찾_ _ㅇ)')
        hidden_finding_state++;
    }
    
    
    
    
    
    if(e.key == '`' && hidden_finding_state == 7){
        if(prompt('이 곡의 이름을 맞춰보세요') == `찾${hiddencode_01}어`){
            selected_song =  11;
            alert('숨겨진 곡으로 전송됩니다.')
            Songplaypause(1);
            render();            

        }
        //hidden_finding_state++;
    }

        

    



})



// 키보드 이벤트

canvas.addEventListener('click', function(event) {



    // 클릭한 좌표 가져오기

    var x = event.clientX - canvas.getBoundingClientRect().left;

    var y = event.clientY - canvas.getBoundingClientRect().top;



    // 좌표를 콘솔에 출력 또는 다른 작업 수행

    console.log('클릭한 좌표: (' + x + ', ' + y + ')');





    if(state === 0){

        /// state 가 0 라면, F,J 반응형



        if(inthemiddle(6.5, x, 63.5) && inthemiddle(178, y, 231)){

            // F 누름.

            offset -= 10;

            render()

            if(state == 0){

                soundoffset.currentTime=0

                soundoffset.play();

            } else if(state == 1 || state == 2){

                soundclick.currentTime= 0

                soundclick.play()

            }

        } if(inthemiddle(330.5, x, 389.5) && inthemiddle(180,y,239)){



            offset += 10;

            render();

            if(state == 0){

                soundoffset.currentTime=0

                soundoffset.play();

            } else if(state == 1 || state == 2){

                soundclick.currentTime= 0

                soundclick.play()

            }



        } if(inthemiddle(15.5, x, 107.5) && inthemiddle(507, y, 590)){

            phase_transition()

            if(state == 0){

                soundoffset.currentTime=0

                soundoffset.play();

            } else if(state == 1 || state == 2){

                soundclick.currentTime= 0

                soundclick.play()

            }

        } if(inthemiddle(0, x, 221) && inthemiddle(295, y, 393)){


            if(isshowingloginpage){
                document.getElementById('login_page').style.display = 'none'
                isshowingloginpage = false;
            } else if(!isshowingloginpage){
                document.getElementById('login_page').style.display = 'block'
                isshowingloginpage = true;
            }



        }





    } else if(state == 1){



        if(inthemiddle(270.5, x, 397.5) && inthemiddle(411, y, 449)){

            if(selected_song < 9){

                selected_song++;

                





                Songplaypause(1)

                render()



            } else if(selected_song == 9){

                if(warning_10 <= 0){
                    alert('10단계로 전송됩니다.')
                    selected_song = 10
                    Songplaypause(1);
                    render();
                } else if(warning_10 == 2){
                    alert('무슨 일인지 막혀있습니다...')
                    warning_10--
                    selected_song = 9
                } else if(warning_10 == 1){
                    alert('여기는 위험한 곳입니다.. 돌아가세요')
                    selected_song = 9
                    warning_10--;
                }





            } else if(selected_song == 10){
                alert('이 맵은 히든 맵입니다.')
                alert('정상적인 방법으로는 갈 수 없습니다')
                // selected_song = 11;
                // Songplaypause(1);
                // render();

            }

        }

        

        if(inthemiddle(0.5,x, 117.5) && inthemiddle(398,y,468)){



            if(selected_song != 1){

                selected_song--;

                Songplaypause(-1)

                if(state == 0){

                    soundoffset.currentTime=0

                    soundoffset.play();

                } else if(state == 1 || state == 2){

                    soundclick.currentTime= 0

                    soundclick.play()

                }

                

            }

          

            render()



        } if(inthemiddle(0,x,393) && inthemiddle(482, y, 594)){

            phase_transition();

            if(state == 0){

                soundoffset.currentTime=0

                soundoffset.play();

            } else if(state == 1 || state == 2){

                soundclick.currentTime= 0

                soundclick.play()

            }





        }

        //클릭한 좌표: (-0.111114501953125, 481.99999237060547)

        //script.js:883 클릭한 좌표: (393.8888854980469, 594.9999923706055)











    } else if(state == 2){

        if(state == 0){

            soundoffset.currentTime=0

            soundoffset.play();

        } else if(state == 1 || state == 2){

            soundclick.currentTime= 0

            soundclick.play()

        }



        phase_transition()



    } else if(state == 3){

        // 겜플 중



        if(inthemiddle(0, x, 100)){

            press_key(0)

        } else if(inthemiddle(100, x, 200)){

            press_key(1)

        } else if(inthemiddle(200, x, 300)){

            press_key(2)

        } else if(inthemiddle(300, x, 400)){

            press_key(3)

        }







    } else if(state == 4){
        // 게임 종료 후
        state = 0;
        
        ctx.font = '24px Arial'
        ctx.fillStyle = 'black'
        render()
        selected_song = 1;

    }











});









// 클릭한 좌표: (6.5, 178)

//script.js:874 클릭한 좌표: (63.5, 231)







loginbutton.addEventListener('click', ()=>{


    SignUpandLogin(2)

    
})

signupbutton.addEventListener('click', ()=>{

    SignUpandLogin(1);

});




key_01_button.addEventListener('click', () =>{
    key_change_stat[1] = 1;
    key_01_button.textContent = '키 입력'
})
key_02_button.addEventListener('click', () =>{
    key_change_stat[2] = 1;
    key_02_button.textContent = '키 입력'
})
key_03_button.addEventListener('click', () =>{
    key_change_stat[3] = 1;
    key_03_button.textContent = '키 입력'
})
key_04_button.addEventListener('click', () =>{
    key_change_stat[4] = 1;
    key_04_button.textContent = '키 입력'
})


init();
























































































































